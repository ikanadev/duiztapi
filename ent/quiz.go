// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/quiz"
)

// Quiz is the model entity for the Quiz schema.
type Quiz struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URLImg holds the value of the "url_img" field.
	URLImg string `json:"url_img,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuizQuery when eager-loading is set.
	Edges QuizEdges `json:"edges"`
}

// QuizEdges holds the relations/edges for other nodes in the graph.
type QuizEdges struct {
	// Questions holds the value of the questions edge.
	Questions []*Question
	// Langs holds the value of the langs edge.
	Langs []*QuizLangs
	// Users holds the value of the users edge.
	Users []*User
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [3]bool
}

// QuestionsOrErr returns the Questions value or an error if the edge
// was not loaded in eager-loading.
func (e QuizEdges) QuestionsOrErr() ([]*Question, error) {
	if e.loadedTypes[0] {
		return e.Questions, nil
	}
	return nil, &NotLoadedError{edge: "questions"}
}

// LangsOrErr returns the Langs value or an error if the edge
// was not loaded in eager-loading.
func (e QuizEdges) LangsOrErr() ([]*QuizLangs, error) {
	if e.loadedTypes[1] {
		return e.Langs, nil
	}
	return nil, &NotLoadedError{edge: "langs"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e QuizEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[2] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Quiz) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case quiz.FieldID:
			values[i] = &sql.NullInt64{}
		case quiz.FieldURLImg:
			values[i] = &sql.NullString{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Quiz", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Quiz fields.
func (q *Quiz) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quiz.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case quiz.FieldURLImg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url_img", values[i])
			} else if value.Valid {
				q.URLImg = value.String
			}
		}
	}
	return nil
}

// QueryQuestions queries the "questions" edge of the Quiz entity.
func (q *Quiz) QueryQuestions() *QuestionQuery {
	return (&QuizClient{config: q.config}).QueryQuestions(q)
}

// QueryLangs queries the "langs" edge of the Quiz entity.
func (q *Quiz) QueryLangs() *QuizLangsQuery {
	return (&QuizClient{config: q.config}).QueryLangs(q)
}

// QueryUsers queries the "users" edge of the Quiz entity.
func (q *Quiz) QueryUsers() *UserQuery {
	return (&QuizClient{config: q.config}).QueryUsers(q)
}

// Update returns a builder for updating this Quiz.
// Note that you need to call Quiz.Unwrap() before calling this method if this Quiz
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Quiz) Update() *QuizUpdateOne {
	return (&QuizClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Quiz entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Quiz) Unwrap() *Quiz {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Quiz is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Quiz) String() string {
	var builder strings.Builder
	builder.WriteString("Quiz(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", url_img=")
	builder.WriteString(q.URLImg)
	builder.WriteByte(')')
	return builder.String()
}

// Quizs is a parsable slice of Quiz.
type Quizs []*Quiz

func (q Quizs) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
