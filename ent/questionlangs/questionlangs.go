// Code generated by entc, DO NOT EDIT.

package questionlangs

const (
	// Label holds the string label denoting the questionlangs type in the database.
	Label = "question_langs"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldBody holds the string denoting the body field in the database.
	FieldBody = "body"
	// FieldExplanation holds the string denoting the explanation field in the database.
	FieldExplanation = "explanation"

	// EdgeI18n holds the string denoting the i18n edge name in mutations.
	EdgeI18n = "i18n"
	// EdgeQuestion holds the string denoting the question edge name in mutations.
	EdgeQuestion = "question"

	// Table holds the table name of the questionlangs in the database.
	Table = "question_langs"
	// I18nTable is the table the holds the i18n relation/edge.
	I18nTable = "question_langs"
	// I18nInverseTable is the table name for the I18n entity.
	// It exists in this package in order to avoid circular dependency with the "i18n" package.
	I18nInverseTable = "i18ns"
	// I18nColumn is the table column denoting the i18n relation/edge.
	I18nColumn = "i18n_question_langs"
	// QuestionTable is the table the holds the question relation/edge.
	QuestionTable = "question_langs"
	// QuestionInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionInverseTable = "questions"
	// QuestionColumn is the table column denoting the question relation/edge.
	QuestionColumn = "question_langs"
)

// Columns holds all SQL columns for questionlangs fields.
var Columns = []string{
	FieldID,
	FieldTitle,
	FieldBody,
	FieldExplanation,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the QuestionLangs type.
var ForeignKeys = []string{
	"i18n_question_langs",
	"question_langs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}
