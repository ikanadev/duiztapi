// Code generated by entc, DO NOT EDIT.

package questionlangs

import (
	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/vmkevv/duiztapi/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Body applies equality check predicate on the "body" field. It's identical to BodyEQ.
func Body(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// Explanation applies equality check predicate on the "explanation" field. It's identical to ExplanationEQ.
func Explanation(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExplanation), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// BodyEQ applies the EQ predicate on the "body" field.
func BodyEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBody), v))
	})
}

// BodyNEQ applies the NEQ predicate on the "body" field.
func BodyNEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBody), v))
	})
}

// BodyIn applies the In predicate on the "body" field.
func BodyIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBody), v...))
	})
}

// BodyNotIn applies the NotIn predicate on the "body" field.
func BodyNotIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBody), v...))
	})
}

// BodyGT applies the GT predicate on the "body" field.
func BodyGT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBody), v))
	})
}

// BodyGTE applies the GTE predicate on the "body" field.
func BodyGTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBody), v))
	})
}

// BodyLT applies the LT predicate on the "body" field.
func BodyLT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBody), v))
	})
}

// BodyLTE applies the LTE predicate on the "body" field.
func BodyLTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBody), v))
	})
}

// BodyContains applies the Contains predicate on the "body" field.
func BodyContains(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldBody), v))
	})
}

// BodyHasPrefix applies the HasPrefix predicate on the "body" field.
func BodyHasPrefix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldBody), v))
	})
}

// BodyHasSuffix applies the HasSuffix predicate on the "body" field.
func BodyHasSuffix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldBody), v))
	})
}

// BodyEqualFold applies the EqualFold predicate on the "body" field.
func BodyEqualFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldBody), v))
	})
}

// BodyContainsFold applies the ContainsFold predicate on the "body" field.
func BodyContainsFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldBody), v))
	})
}

// ExplanationEQ applies the EQ predicate on the "explanation" field.
func ExplanationEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldExplanation), v))
	})
}

// ExplanationNEQ applies the NEQ predicate on the "explanation" field.
func ExplanationNEQ(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldExplanation), v))
	})
}

// ExplanationIn applies the In predicate on the "explanation" field.
func ExplanationIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldExplanation), v...))
	})
}

// ExplanationNotIn applies the NotIn predicate on the "explanation" field.
func ExplanationNotIn(vs ...string) predicate.QuestionLangs {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.QuestionLangs(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldExplanation), v...))
	})
}

// ExplanationGT applies the GT predicate on the "explanation" field.
func ExplanationGT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldExplanation), v))
	})
}

// ExplanationGTE applies the GTE predicate on the "explanation" field.
func ExplanationGTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldExplanation), v))
	})
}

// ExplanationLT applies the LT predicate on the "explanation" field.
func ExplanationLT(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldExplanation), v))
	})
}

// ExplanationLTE applies the LTE predicate on the "explanation" field.
func ExplanationLTE(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldExplanation), v))
	})
}

// ExplanationContains applies the Contains predicate on the "explanation" field.
func ExplanationContains(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldExplanation), v))
	})
}

// ExplanationHasPrefix applies the HasPrefix predicate on the "explanation" field.
func ExplanationHasPrefix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldExplanation), v))
	})
}

// ExplanationHasSuffix applies the HasSuffix predicate on the "explanation" field.
func ExplanationHasSuffix(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldExplanation), v))
	})
}

// ExplanationEqualFold applies the EqualFold predicate on the "explanation" field.
func ExplanationEqualFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldExplanation), v))
	})
}

// ExplanationContainsFold applies the ContainsFold predicate on the "explanation" field.
func ExplanationContainsFold(v string) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldExplanation), v))
	})
}

// HasI18n applies the HasEdge predicate on the "i18n" edge.
func HasI18n() predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(I18nTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, I18nTable, I18nColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasI18nWith applies the HasEdge predicate on the "i18n" edge with a given conditions (other predicates).
func HasI18nWith(preds ...predicate.I18n) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(I18nInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, I18nTable, I18nColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasQuestion applies the HasEdge predicate on the "question" edge.
func HasQuestion() predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasQuestionWith applies the HasEdge predicate on the "question" edge with a given conditions (other predicates).
func HasQuestionWith(preds ...predicate.Question) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(QuestionInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, QuestionTable, QuestionColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.QuestionLangs) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.QuestionLangs) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.QuestionLangs) predicate.QuestionLangs {
	return predicate.QuestionLangs(func(s *sql.Selector) {
		p(s.Not())
	})
}
