// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/response"
	"github.com/vmkevv/duiztapi/ent/user"
)

// Response is the model entity for the Response schema.
type Response struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ResponseQuery when eager-loading is set.
	Edges            ResponseEdges `json:"edges"`
	answer_responses *int
	user_responses   *int
}

// ResponseEdges holds the relations/edges for other nodes in the graph.
type ResponseEdges struct {
	// User holds the value of the user edge.
	User *User
	// Answer holds the value of the answer edge.
	Answer *Answer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// UserOrErr returns the User value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) UserOrErr() (*User, error) {
	if e.loadedTypes[0] {
		if e.User == nil {
			// The edge user was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: user.Label}
		}
		return e.User, nil
	}
	return nil, &NotLoadedError{edge: "user"}
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ResponseEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[1] {
		if e.Answer == nil {
			// The edge answer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Response) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case response.FieldID:
			values[i] = &sql.NullInt64{}
		case response.FieldCreatedAt:
			values[i] = &sql.NullTime{}
		case response.ForeignKeys[0]: // answer_responses
			values[i] = &sql.NullInt64{}
		case response.ForeignKeys[1]: // user_responses
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Response", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Response fields.
func (r *Response) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case response.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case response.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case response.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field answer_responses", value)
			} else if value.Valid {
				r.answer_responses = new(int)
				*r.answer_responses = int(value.Int64)
			}
		case response.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field user_responses", value)
			} else if value.Valid {
				r.user_responses = new(int)
				*r.user_responses = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryUser queries the "user" edge of the Response entity.
func (r *Response) QueryUser() *UserQuery {
	return (&ResponseClient{config: r.config}).QueryUser(r)
}

// QueryAnswer queries the "answer" edge of the Response entity.
func (r *Response) QueryAnswer() *AnswerQuery {
	return (&ResponseClient{config: r.config}).QueryAnswer(r)
}

// Update returns a builder for updating this Response.
// Note that you need to call Response.Unwrap() before calling this method if this Response
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Response) Update() *ResponseUpdateOne {
	return (&ResponseClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Response entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Response) Unwrap() *Response {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Response is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Response) String() string {
	var builder strings.Builder
	builder.WriteString("Response(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Responses is a parsable slice of Response.
type Responses []*Response

func (r Responses) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
