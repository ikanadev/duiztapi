// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/answerlangs"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/predicate"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/questionlangs"
	"github.com/vmkevv/duiztapi/ent/quiz"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
	"github.com/vmkevv/duiztapi/ent/response"
	"github.com/vmkevv/duiztapi/ent/user"

	"github.com/facebook/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeAnswer        = "Answer"
	TypeAnswerLangs   = "AnswerLangs"
	TypeI18n          = "I18n"
	TypeQuestion      = "Question"
	TypeQuestionLangs = "QuestionLangs"
	TypeQuiz          = "Quiz"
	TypeQuizLangs     = "QuizLangs"
	TypeResponse      = "Response"
	TypeUser          = "User"
)

// AnswerMutation represents an operation that mutates the Answer nodes in the graph.
type AnswerMutation struct {
	config
	op               Op
	typ              string
	id               *int
	clearedFields    map[string]struct{}
	langs            map[int]struct{}
	removedlangs     map[int]struct{}
	clearedlangs     bool
	responses        map[int]struct{}
	removedresponses map[int]struct{}
	clearedresponses bool
	question         *int
	clearedquestion  bool
	done             bool
	oldValue         func(context.Context) (*Answer, error)
	predicates       []predicate.Answer
}

var _ ent.Mutation = (*AnswerMutation)(nil)

// answerOption allows management of the mutation configuration using functional options.
type answerOption func(*AnswerMutation)

// newAnswerMutation creates new mutation for the Answer entity.
func newAnswerMutation(c config, op Op, opts ...answerOption) *AnswerMutation {
	m := &AnswerMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerID sets the ID field of the mutation.
func withAnswerID(id int) answerOption {
	return func(m *AnswerMutation) {
		var (
			err   error
			once  sync.Once
			value *Answer
		)
		m.oldValue = func(ctx context.Context) (*Answer, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Answer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswer sets the old Answer of the mutation.
func withAnswer(node *Answer) answerOption {
	return func(m *AnswerMutation) {
		m.oldValue = func(context.Context) (*Answer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AnswerMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddLangIDs adds the "langs" edge to the AnswerLangs entity by ids.
func (m *AnswerMutation) AddLangIDs(ids ...int) {
	if m.langs == nil {
		m.langs = make(map[int]struct{})
	}
	for i := range ids {
		m.langs[ids[i]] = struct{}{}
	}
}

// ClearLangs clears the "langs" edge to the AnswerLangs entity.
func (m *AnswerMutation) ClearLangs() {
	m.clearedlangs = true
}

// LangsCleared returns if the "langs" edge to the AnswerLangs entity was cleared.
func (m *AnswerMutation) LangsCleared() bool {
	return m.clearedlangs
}

// RemoveLangIDs removes the "langs" edge to the AnswerLangs entity by IDs.
func (m *AnswerMutation) RemoveLangIDs(ids ...int) {
	if m.removedlangs == nil {
		m.removedlangs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlangs[ids[i]] = struct{}{}
	}
}

// RemovedLangs returns the removed IDs of the "langs" edge to the AnswerLangs entity.
func (m *AnswerMutation) RemovedLangsIDs() (ids []int) {
	for id := range m.removedlangs {
		ids = append(ids, id)
	}
	return
}

// LangsIDs returns the "langs" edge IDs in the mutation.
func (m *AnswerMutation) LangsIDs() (ids []int) {
	for id := range m.langs {
		ids = append(ids, id)
	}
	return
}

// ResetLangs resets all changes to the "langs" edge.
func (m *AnswerMutation) ResetLangs() {
	m.langs = nil
	m.clearedlangs = false
	m.removedlangs = nil
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *AnswerMutation) AddResponseIDs(ids ...int) {
	if m.responses == nil {
		m.responses = make(map[int]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *AnswerMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared returns if the "responses" edge to the Response entity was cleared.
func (m *AnswerMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *AnswerMutation) RemoveResponseIDs(ids ...int) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[int]struct{})
	}
	for i := range ids {
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *AnswerMutation) RemovedResponsesIDs() (ids []int) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *AnswerMutation) ResponsesIDs() (ids []int) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *AnswerMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *AnswerMutation) SetQuestionID(id int) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *AnswerMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared returns if the "question" edge to the Question entity was cleared.
func (m *AnswerMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *AnswerMutation) QuestionID() (id int, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *AnswerMutation) QuestionIDs() (ids []int) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *AnswerMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// Op returns the operation name.
func (m *AnswerMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Answer).
func (m *AnswerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Answer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Answer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Answer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Answer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.langs != nil {
		edges = append(edges, answer.EdgeLangs)
	}
	if m.responses != nil {
		edges = append(edges, answer.EdgeResponses)
	}
	if m.question != nil {
		edges = append(edges, answer.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.langs))
		for id := range m.langs {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedlangs != nil {
		edges = append(edges, answer.EdgeLangs)
	}
	if m.removedresponses != nil {
		edges = append(edges, answer.EdgeResponses)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case answer.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.removedlangs))
		for id := range m.removedlangs {
			ids = append(ids, id)
		}
		return ids
	case answer.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedlangs {
		edges = append(edges, answer.EdgeLangs)
	}
	if m.clearedresponses {
		edges = append(edges, answer.EdgeResponses)
	}
	if m.clearedquestion {
		edges = append(edges, answer.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerMutation) EdgeCleared(name string) bool {
	switch name {
	case answer.EdgeLangs:
		return m.clearedlangs
	case answer.EdgeResponses:
		return m.clearedresponses
	case answer.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerMutation) ClearEdge(name string) error {
	switch name {
	case answer.EdgeQuestion:
		m.ClearQuestion()
		return nil
	}
	return fmt.Errorf("unknown Answer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerMutation) ResetEdge(name string) error {
	switch name {
	case answer.EdgeLangs:
		m.ResetLangs()
		return nil
	case answer.EdgeResponses:
		m.ResetResponses()
		return nil
	case answer.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown Answer edge %s", name)
}

// AnswerLangsMutation represents an operation that mutates the AnswerLangs nodes in the graph.
type AnswerLangsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	text          *string
	clearedFields map[string]struct{}
	answer        *int
	clearedanswer bool
	i18n          *int
	clearedi18n   bool
	done          bool
	oldValue      func(context.Context) (*AnswerLangs, error)
	predicates    []predicate.AnswerLangs
}

var _ ent.Mutation = (*AnswerLangsMutation)(nil)

// answerlangsOption allows management of the mutation configuration using functional options.
type answerlangsOption func(*AnswerLangsMutation)

// newAnswerLangsMutation creates new mutation for the AnswerLangs entity.
func newAnswerLangsMutation(c config, op Op, opts ...answerlangsOption) *AnswerLangsMutation {
	m := &AnswerLangsMutation{
		config:        c,
		op:            op,
		typ:           TypeAnswerLangs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withAnswerLangsID sets the ID field of the mutation.
func withAnswerLangsID(id int) answerlangsOption {
	return func(m *AnswerLangsMutation) {
		var (
			err   error
			once  sync.Once
			value *AnswerLangs
		)
		m.oldValue = func(ctx context.Context) (*AnswerLangs, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().AnswerLangs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withAnswerLangs sets the old AnswerLangs of the mutation.
func withAnswerLangs(node *AnswerLangs) answerlangsOption {
	return func(m *AnswerLangsMutation) {
		m.oldValue = func(context.Context) (*AnswerLangs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m AnswerLangsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m AnswerLangsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *AnswerLangsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetText sets the "text" field.
func (m *AnswerLangsMutation) SetText(s string) {
	m.text = &s
}

// Text returns the value of the "text" field in the mutation.
func (m *AnswerLangsMutation) Text() (r string, exists bool) {
	v := m.text
	if v == nil {
		return
	}
	return *v, true
}

// OldText returns the old "text" field's value of the AnswerLangs entity.
// If the AnswerLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *AnswerLangsMutation) OldText(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldText is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldText requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldText: %w", err)
	}
	return oldValue.Text, nil
}

// ResetText resets all changes to the "text" field.
func (m *AnswerLangsMutation) ResetText() {
	m.text = nil
}

// SetAnswerID sets the "answer" edge to the Answer entity by id.
func (m *AnswerLangsMutation) SetAnswerID(id int) {
	m.answer = &id
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (m *AnswerLangsMutation) ClearAnswer() {
	m.clearedanswer = true
}

// AnswerCleared returns if the "answer" edge to the Answer entity was cleared.
func (m *AnswerLangsMutation) AnswerCleared() bool {
	return m.clearedanswer
}

// AnswerID returns the "answer" edge ID in the mutation.
func (m *AnswerLangsMutation) AnswerID() (id int, exists bool) {
	if m.answer != nil {
		return *m.answer, true
	}
	return
}

// AnswerIDs returns the "answer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AnswerID instead. It exists only for internal usage by the builders.
func (m *AnswerLangsMutation) AnswerIDs() (ids []int) {
	if id := m.answer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAnswer resets all changes to the "answer" edge.
func (m *AnswerLangsMutation) ResetAnswer() {
	m.answer = nil
	m.clearedanswer = false
}

// SetI18nID sets the "i18n" edge to the I18n entity by id.
func (m *AnswerLangsMutation) SetI18nID(id int) {
	m.i18n = &id
}

// ClearI18n clears the "i18n" edge to the I18n entity.
func (m *AnswerLangsMutation) ClearI18n() {
	m.clearedi18n = true
}

// I18nCleared returns if the "i18n" edge to the I18n entity was cleared.
func (m *AnswerLangsMutation) I18nCleared() bool {
	return m.clearedi18n
}

// I18nID returns the "i18n" edge ID in the mutation.
func (m *AnswerLangsMutation) I18nID() (id int, exists bool) {
	if m.i18n != nil {
		return *m.i18n, true
	}
	return
}

// I18nIDs returns the "i18n" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// I18nID instead. It exists only for internal usage by the builders.
func (m *AnswerLangsMutation) I18nIDs() (ids []int) {
	if id := m.i18n; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetI18n resets all changes to the "i18n" edge.
func (m *AnswerLangsMutation) ResetI18n() {
	m.i18n = nil
	m.clearedi18n = false
}

// Op returns the operation name.
func (m *AnswerLangsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (AnswerLangs).
func (m *AnswerLangsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *AnswerLangsMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.text != nil {
		fields = append(fields, answerlangs.FieldText)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *AnswerLangsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case answerlangs.FieldText:
		return m.Text()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *AnswerLangsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case answerlangs.FieldText:
		return m.OldText(ctx)
	}
	return nil, fmt.Errorf("unknown AnswerLangs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerLangsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case answerlangs.FieldText:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetText(v)
		return nil
	}
	return fmt.Errorf("unknown AnswerLangs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *AnswerLangsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *AnswerLangsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *AnswerLangsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown AnswerLangs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *AnswerLangsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *AnswerLangsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *AnswerLangsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown AnswerLangs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *AnswerLangsMutation) ResetField(name string) error {
	switch name {
	case answerlangs.FieldText:
		m.ResetText()
		return nil
	}
	return fmt.Errorf("unknown AnswerLangs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *AnswerLangsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.answer != nil {
		edges = append(edges, answerlangs.EdgeAnswer)
	}
	if m.i18n != nil {
		edges = append(edges, answerlangs.EdgeI18n)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *AnswerLangsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case answerlangs.EdgeAnswer:
		if id := m.answer; id != nil {
			return []ent.Value{*id}
		}
	case answerlangs.EdgeI18n:
		if id := m.i18n; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *AnswerLangsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *AnswerLangsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *AnswerLangsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedanswer {
		edges = append(edges, answerlangs.EdgeAnswer)
	}
	if m.clearedi18n {
		edges = append(edges, answerlangs.EdgeI18n)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *AnswerLangsMutation) EdgeCleared(name string) bool {
	switch name {
	case answerlangs.EdgeAnswer:
		return m.clearedanswer
	case answerlangs.EdgeI18n:
		return m.clearedi18n
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *AnswerLangsMutation) ClearEdge(name string) error {
	switch name {
	case answerlangs.EdgeAnswer:
		m.ClearAnswer()
		return nil
	case answerlangs.EdgeI18n:
		m.ClearI18n()
		return nil
	}
	return fmt.Errorf("unknown AnswerLangs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *AnswerLangsMutation) ResetEdge(name string) error {
	switch name {
	case answerlangs.EdgeAnswer:
		m.ResetAnswer()
		return nil
	case answerlangs.EdgeI18n:
		m.ResetI18n()
		return nil
	}
	return fmt.Errorf("unknown AnswerLangs edge %s", name)
}

// I18nMutation represents an operation that mutates the I18n nodes in the graph.
type I18nMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	code                  *string
	language              *string
	clearedFields         map[string]struct{}
	answer_langs          map[int]struct{}
	removedanswer_langs   map[int]struct{}
	clearedanswer_langs   bool
	question_langs        map[int]struct{}
	removedquestion_langs map[int]struct{}
	clearedquestion_langs bool
	quiz_langs            map[int]struct{}
	removedquiz_langs     map[int]struct{}
	clearedquiz_langs     bool
	done                  bool
	oldValue              func(context.Context) (*I18n, error)
	predicates            []predicate.I18n
}

var _ ent.Mutation = (*I18nMutation)(nil)

// i18nOption allows management of the mutation configuration using functional options.
type i18nOption func(*I18nMutation)

// newI18nMutation creates new mutation for the I18n entity.
func newI18nMutation(c config, op Op, opts ...i18nOption) *I18nMutation {
	m := &I18nMutation{
		config:        c,
		op:            op,
		typ:           TypeI18n,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withI18nID sets the ID field of the mutation.
func withI18nID(id int) i18nOption {
	return func(m *I18nMutation) {
		var (
			err   error
			once  sync.Once
			value *I18n
		)
		m.oldValue = func(ctx context.Context) (*I18n, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().I18n.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withI18n sets the old I18n of the mutation.
func withI18n(node *I18n) i18nOption {
	return func(m *I18nMutation) {
		m.oldValue = func(context.Context) (*I18n, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m I18nMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m I18nMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *I18nMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCode sets the "code" field.
func (m *I18nMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *I18nMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the I18n entity.
// If the I18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *I18nMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCode: %w", err)
	}
	return oldValue.Code, nil
}

// ResetCode resets all changes to the "code" field.
func (m *I18nMutation) ResetCode() {
	m.code = nil
}

// SetLanguage sets the "language" field.
func (m *I18nMutation) SetLanguage(s string) {
	m.language = &s
}

// Language returns the value of the "language" field in the mutation.
func (m *I18nMutation) Language() (r string, exists bool) {
	v := m.language
	if v == nil {
		return
	}
	return *v, true
}

// OldLanguage returns the old "language" field's value of the I18n entity.
// If the I18n object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *I18nMutation) OldLanguage(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldLanguage is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldLanguage requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLanguage: %w", err)
	}
	return oldValue.Language, nil
}

// ResetLanguage resets all changes to the "language" field.
func (m *I18nMutation) ResetLanguage() {
	m.language = nil
}

// AddAnswerLangIDs adds the "answer_langs" edge to the AnswerLangs entity by ids.
func (m *I18nMutation) AddAnswerLangIDs(ids ...int) {
	if m.answer_langs == nil {
		m.answer_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.answer_langs[ids[i]] = struct{}{}
	}
}

// ClearAnswerLangs clears the "answer_langs" edge to the AnswerLangs entity.
func (m *I18nMutation) ClearAnswerLangs() {
	m.clearedanswer_langs = true
}

// AnswerLangsCleared returns if the "answer_langs" edge to the AnswerLangs entity was cleared.
func (m *I18nMutation) AnswerLangsCleared() bool {
	return m.clearedanswer_langs
}

// RemoveAnswerLangIDs removes the "answer_langs" edge to the AnswerLangs entity by IDs.
func (m *I18nMutation) RemoveAnswerLangIDs(ids ...int) {
	if m.removedanswer_langs == nil {
		m.removedanswer_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedanswer_langs[ids[i]] = struct{}{}
	}
}

// RemovedAnswerLangs returns the removed IDs of the "answer_langs" edge to the AnswerLangs entity.
func (m *I18nMutation) RemovedAnswerLangsIDs() (ids []int) {
	for id := range m.removedanswer_langs {
		ids = append(ids, id)
	}
	return
}

// AnswerLangsIDs returns the "answer_langs" edge IDs in the mutation.
func (m *I18nMutation) AnswerLangsIDs() (ids []int) {
	for id := range m.answer_langs {
		ids = append(ids, id)
	}
	return
}

// ResetAnswerLangs resets all changes to the "answer_langs" edge.
func (m *I18nMutation) ResetAnswerLangs() {
	m.answer_langs = nil
	m.clearedanswer_langs = false
	m.removedanswer_langs = nil
}

// AddQuestionLangIDs adds the "question_langs" edge to the QuestionLangs entity by ids.
func (m *I18nMutation) AddQuestionLangIDs(ids ...int) {
	if m.question_langs == nil {
		m.question_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.question_langs[ids[i]] = struct{}{}
	}
}

// ClearQuestionLangs clears the "question_langs" edge to the QuestionLangs entity.
func (m *I18nMutation) ClearQuestionLangs() {
	m.clearedquestion_langs = true
}

// QuestionLangsCleared returns if the "question_langs" edge to the QuestionLangs entity was cleared.
func (m *I18nMutation) QuestionLangsCleared() bool {
	return m.clearedquestion_langs
}

// RemoveQuestionLangIDs removes the "question_langs" edge to the QuestionLangs entity by IDs.
func (m *I18nMutation) RemoveQuestionLangIDs(ids ...int) {
	if m.removedquestion_langs == nil {
		m.removedquestion_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedquestion_langs[ids[i]] = struct{}{}
	}
}

// RemovedQuestionLangs returns the removed IDs of the "question_langs" edge to the QuestionLangs entity.
func (m *I18nMutation) RemovedQuestionLangsIDs() (ids []int) {
	for id := range m.removedquestion_langs {
		ids = append(ids, id)
	}
	return
}

// QuestionLangsIDs returns the "question_langs" edge IDs in the mutation.
func (m *I18nMutation) QuestionLangsIDs() (ids []int) {
	for id := range m.question_langs {
		ids = append(ids, id)
	}
	return
}

// ResetQuestionLangs resets all changes to the "question_langs" edge.
func (m *I18nMutation) ResetQuestionLangs() {
	m.question_langs = nil
	m.clearedquestion_langs = false
	m.removedquestion_langs = nil
}

// AddQuizLangIDs adds the "quiz_langs" edge to the QuizLangs entity by ids.
func (m *I18nMutation) AddQuizLangIDs(ids ...int) {
	if m.quiz_langs == nil {
		m.quiz_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.quiz_langs[ids[i]] = struct{}{}
	}
}

// ClearQuizLangs clears the "quiz_langs" edge to the QuizLangs entity.
func (m *I18nMutation) ClearQuizLangs() {
	m.clearedquiz_langs = true
}

// QuizLangsCleared returns if the "quiz_langs" edge to the QuizLangs entity was cleared.
func (m *I18nMutation) QuizLangsCleared() bool {
	return m.clearedquiz_langs
}

// RemoveQuizLangIDs removes the "quiz_langs" edge to the QuizLangs entity by IDs.
func (m *I18nMutation) RemoveQuizLangIDs(ids ...int) {
	if m.removedquiz_langs == nil {
		m.removedquiz_langs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedquiz_langs[ids[i]] = struct{}{}
	}
}

// RemovedQuizLangs returns the removed IDs of the "quiz_langs" edge to the QuizLangs entity.
func (m *I18nMutation) RemovedQuizLangsIDs() (ids []int) {
	for id := range m.removedquiz_langs {
		ids = append(ids, id)
	}
	return
}

// QuizLangsIDs returns the "quiz_langs" edge IDs in the mutation.
func (m *I18nMutation) QuizLangsIDs() (ids []int) {
	for id := range m.quiz_langs {
		ids = append(ids, id)
	}
	return
}

// ResetQuizLangs resets all changes to the "quiz_langs" edge.
func (m *I18nMutation) ResetQuizLangs() {
	m.quiz_langs = nil
	m.clearedquiz_langs = false
	m.removedquiz_langs = nil
}

// Op returns the operation name.
func (m *I18nMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (I18n).
func (m *I18nMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *I18nMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.code != nil {
		fields = append(fields, i18n.FieldCode)
	}
	if m.language != nil {
		fields = append(fields, i18n.FieldLanguage)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *I18nMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case i18n.FieldCode:
		return m.Code()
	case i18n.FieldLanguage:
		return m.Language()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *I18nMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case i18n.FieldCode:
		return m.OldCode(ctx)
	case i18n.FieldLanguage:
		return m.OldLanguage(ctx)
	}
	return nil, fmt.Errorf("unknown I18n field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *I18nMutation) SetField(name string, value ent.Value) error {
	switch name {
	case i18n.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCode(v)
		return nil
	case i18n.FieldLanguage:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLanguage(v)
		return nil
	}
	return fmt.Errorf("unknown I18n field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *I18nMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *I18nMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *I18nMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown I18n numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *I18nMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *I18nMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *I18nMutation) ClearField(name string) error {
	return fmt.Errorf("unknown I18n nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *I18nMutation) ResetField(name string) error {
	switch name {
	case i18n.FieldCode:
		m.ResetCode()
		return nil
	case i18n.FieldLanguage:
		m.ResetLanguage()
		return nil
	}
	return fmt.Errorf("unknown I18n field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *I18nMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.answer_langs != nil {
		edges = append(edges, i18n.EdgeAnswerLangs)
	}
	if m.question_langs != nil {
		edges = append(edges, i18n.EdgeQuestionLangs)
	}
	if m.quiz_langs != nil {
		edges = append(edges, i18n.EdgeQuizLangs)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *I18nMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case i18n.EdgeAnswerLangs:
		ids := make([]ent.Value, 0, len(m.answer_langs))
		for id := range m.answer_langs {
			ids = append(ids, id)
		}
		return ids
	case i18n.EdgeQuestionLangs:
		ids := make([]ent.Value, 0, len(m.question_langs))
		for id := range m.question_langs {
			ids = append(ids, id)
		}
		return ids
	case i18n.EdgeQuizLangs:
		ids := make([]ent.Value, 0, len(m.quiz_langs))
		for id := range m.quiz_langs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *I18nMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedanswer_langs != nil {
		edges = append(edges, i18n.EdgeAnswerLangs)
	}
	if m.removedquestion_langs != nil {
		edges = append(edges, i18n.EdgeQuestionLangs)
	}
	if m.removedquiz_langs != nil {
		edges = append(edges, i18n.EdgeQuizLangs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *I18nMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case i18n.EdgeAnswerLangs:
		ids := make([]ent.Value, 0, len(m.removedanswer_langs))
		for id := range m.removedanswer_langs {
			ids = append(ids, id)
		}
		return ids
	case i18n.EdgeQuestionLangs:
		ids := make([]ent.Value, 0, len(m.removedquestion_langs))
		for id := range m.removedquestion_langs {
			ids = append(ids, id)
		}
		return ids
	case i18n.EdgeQuizLangs:
		ids := make([]ent.Value, 0, len(m.removedquiz_langs))
		for id := range m.removedquiz_langs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *I18nMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedanswer_langs {
		edges = append(edges, i18n.EdgeAnswerLangs)
	}
	if m.clearedquestion_langs {
		edges = append(edges, i18n.EdgeQuestionLangs)
	}
	if m.clearedquiz_langs {
		edges = append(edges, i18n.EdgeQuizLangs)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *I18nMutation) EdgeCleared(name string) bool {
	switch name {
	case i18n.EdgeAnswerLangs:
		return m.clearedanswer_langs
	case i18n.EdgeQuestionLangs:
		return m.clearedquestion_langs
	case i18n.EdgeQuizLangs:
		return m.clearedquiz_langs
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *I18nMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown I18n unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *I18nMutation) ResetEdge(name string) error {
	switch name {
	case i18n.EdgeAnswerLangs:
		m.ResetAnswerLangs()
		return nil
	case i18n.EdgeQuestionLangs:
		m.ResetQuestionLangs()
		return nil
	case i18n.EdgeQuizLangs:
		m.ResetQuizLangs()
		return nil
	}
	return fmt.Errorf("unknown I18n edge %s", name)
}

// QuestionMutation represents an operation that mutates the Question nodes in the graph.
type QuestionMutation struct {
	config
	op                    Op
	typ                   string
	id                    *int
	clearedFields         map[string]struct{}
	answers               map[int]struct{}
	removedanswers        map[int]struct{}
	clearedanswers        bool
	langs                 map[int]struct{}
	removedlangs          map[int]struct{}
	clearedlangs          bool
	quiz                  *int
	clearedquiz           bool
	correct_answer        *int
	clearedcorrect_answer bool
	done                  bool
	oldValue              func(context.Context) (*Question, error)
	predicates            []predicate.Question
}

var _ ent.Mutation = (*QuestionMutation)(nil)

// questionOption allows management of the mutation configuration using functional options.
type questionOption func(*QuestionMutation)

// newQuestionMutation creates new mutation for the Question entity.
func newQuestionMutation(c config, op Op, opts ...questionOption) *QuestionMutation {
	m := &QuestionMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestion,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionID sets the ID field of the mutation.
func withQuestionID(id int) questionOption {
	return func(m *QuestionMutation) {
		var (
			err   error
			once  sync.Once
			value *Question
		)
		m.oldValue = func(ctx context.Context) (*Question, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Question.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestion sets the old Question of the mutation.
func withQuestion(node *Question) questionOption {
	return func(m *QuestionMutation) {
		m.oldValue = func(context.Context) (*Question, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *QuestionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by ids.
func (m *QuestionMutation) AddAnswerIDs(ids ...int) {
	if m.answers == nil {
		m.answers = make(map[int]struct{})
	}
	for i := range ids {
		m.answers[ids[i]] = struct{}{}
	}
}

// ClearAnswers clears the "answers" edge to the Answer entity.
func (m *QuestionMutation) ClearAnswers() {
	m.clearedanswers = true
}

// AnswersCleared returns if the "answers" edge to the Answer entity was cleared.
func (m *QuestionMutation) AnswersCleared() bool {
	return m.clearedanswers
}

// RemoveAnswerIDs removes the "answers" edge to the Answer entity by IDs.
func (m *QuestionMutation) RemoveAnswerIDs(ids ...int) {
	if m.removedanswers == nil {
		m.removedanswers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedanswers[ids[i]] = struct{}{}
	}
}

// RemovedAnswers returns the removed IDs of the "answers" edge to the Answer entity.
func (m *QuestionMutation) RemovedAnswersIDs() (ids []int) {
	for id := range m.removedanswers {
		ids = append(ids, id)
	}
	return
}

// AnswersIDs returns the "answers" edge IDs in the mutation.
func (m *QuestionMutation) AnswersIDs() (ids []int) {
	for id := range m.answers {
		ids = append(ids, id)
	}
	return
}

// ResetAnswers resets all changes to the "answers" edge.
func (m *QuestionMutation) ResetAnswers() {
	m.answers = nil
	m.clearedanswers = false
	m.removedanswers = nil
}

// AddLangIDs adds the "langs" edge to the QuestionLangs entity by ids.
func (m *QuestionMutation) AddLangIDs(ids ...int) {
	if m.langs == nil {
		m.langs = make(map[int]struct{})
	}
	for i := range ids {
		m.langs[ids[i]] = struct{}{}
	}
}

// ClearLangs clears the "langs" edge to the QuestionLangs entity.
func (m *QuestionMutation) ClearLangs() {
	m.clearedlangs = true
}

// LangsCleared returns if the "langs" edge to the QuestionLangs entity was cleared.
func (m *QuestionMutation) LangsCleared() bool {
	return m.clearedlangs
}

// RemoveLangIDs removes the "langs" edge to the QuestionLangs entity by IDs.
func (m *QuestionMutation) RemoveLangIDs(ids ...int) {
	if m.removedlangs == nil {
		m.removedlangs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlangs[ids[i]] = struct{}{}
	}
}

// RemovedLangs returns the removed IDs of the "langs" edge to the QuestionLangs entity.
func (m *QuestionMutation) RemovedLangsIDs() (ids []int) {
	for id := range m.removedlangs {
		ids = append(ids, id)
	}
	return
}

// LangsIDs returns the "langs" edge IDs in the mutation.
func (m *QuestionMutation) LangsIDs() (ids []int) {
	for id := range m.langs {
		ids = append(ids, id)
	}
	return
}

// ResetLangs resets all changes to the "langs" edge.
func (m *QuestionMutation) ResetLangs() {
	m.langs = nil
	m.clearedlangs = false
	m.removedlangs = nil
}

// SetQuizID sets the "quiz" edge to the Quiz entity by id.
func (m *QuestionMutation) SetQuizID(id int) {
	m.quiz = &id
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (m *QuestionMutation) ClearQuiz() {
	m.clearedquiz = true
}

// QuizCleared returns if the "quiz" edge to the Quiz entity was cleared.
func (m *QuestionMutation) QuizCleared() bool {
	return m.clearedquiz
}

// QuizID returns the "quiz" edge ID in the mutation.
func (m *QuestionMutation) QuizID() (id int, exists bool) {
	if m.quiz != nil {
		return *m.quiz, true
	}
	return
}

// QuizIDs returns the "quiz" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuizID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) QuizIDs() (ids []int) {
	if id := m.quiz; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuiz resets all changes to the "quiz" edge.
func (m *QuestionMutation) ResetQuiz() {
	m.quiz = nil
	m.clearedquiz = false
}

// SetCorrectAnswerID sets the "correct_answer" edge to the Answer entity by id.
func (m *QuestionMutation) SetCorrectAnswerID(id int) {
	m.correct_answer = &id
}

// ClearCorrectAnswer clears the "correct_answer" edge to the Answer entity.
func (m *QuestionMutation) ClearCorrectAnswer() {
	m.clearedcorrect_answer = true
}

// CorrectAnswerCleared returns if the "correct_answer" edge to the Answer entity was cleared.
func (m *QuestionMutation) CorrectAnswerCleared() bool {
	return m.clearedcorrect_answer
}

// CorrectAnswerID returns the "correct_answer" edge ID in the mutation.
func (m *QuestionMutation) CorrectAnswerID() (id int, exists bool) {
	if m.correct_answer != nil {
		return *m.correct_answer, true
	}
	return
}

// CorrectAnswerIDs returns the "correct_answer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// CorrectAnswerID instead. It exists only for internal usage by the builders.
func (m *QuestionMutation) CorrectAnswerIDs() (ids []int) {
	if id := m.correct_answer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetCorrectAnswer resets all changes to the "correct_answer" edge.
func (m *QuestionMutation) ResetCorrectAnswer() {
	m.correct_answer = nil
	m.clearedcorrect_answer = false
}

// Op returns the operation name.
func (m *QuestionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Question).
func (m *QuestionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionMutation) Fields() []string {
	fields := make([]string, 0, 0)
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionMutation) Field(name string) (ent.Value, bool) {
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	return nil, fmt.Errorf("unknown Question field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) SetField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionMutation) AddField(name string, value ent.Value) error {
	return fmt.Errorf("unknown Question numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Question nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionMutation) ResetField(name string) error {
	return fmt.Errorf("unknown Question field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.answers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.langs != nil {
		edges = append(edges, question.EdgeLangs)
	}
	if m.quiz != nil {
		edges = append(edges, question.EdgeQuiz)
	}
	if m.correct_answer != nil {
		edges = append(edges, question.EdgeCorrectAnswer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.answers))
		for id := range m.answers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.langs))
		for id := range m.langs {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeQuiz:
		if id := m.quiz; id != nil {
			return []ent.Value{*id}
		}
	case question.EdgeCorrectAnswer:
		if id := m.correct_answer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedanswers != nil {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.removedlangs != nil {
		edges = append(edges, question.EdgeLangs)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case question.EdgeAnswers:
		ids := make([]ent.Value, 0, len(m.removedanswers))
		for id := range m.removedanswers {
			ids = append(ids, id)
		}
		return ids
	case question.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.removedlangs))
		for id := range m.removedlangs {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedanswers {
		edges = append(edges, question.EdgeAnswers)
	}
	if m.clearedlangs {
		edges = append(edges, question.EdgeLangs)
	}
	if m.clearedquiz {
		edges = append(edges, question.EdgeQuiz)
	}
	if m.clearedcorrect_answer {
		edges = append(edges, question.EdgeCorrectAnswer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionMutation) EdgeCleared(name string) bool {
	switch name {
	case question.EdgeAnswers:
		return m.clearedanswers
	case question.EdgeLangs:
		return m.clearedlangs
	case question.EdgeQuiz:
		return m.clearedquiz
	case question.EdgeCorrectAnswer:
		return m.clearedcorrect_answer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionMutation) ClearEdge(name string) error {
	switch name {
	case question.EdgeQuiz:
		m.ClearQuiz()
		return nil
	case question.EdgeCorrectAnswer:
		m.ClearCorrectAnswer()
		return nil
	}
	return fmt.Errorf("unknown Question unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionMutation) ResetEdge(name string) error {
	switch name {
	case question.EdgeAnswers:
		m.ResetAnswers()
		return nil
	case question.EdgeLangs:
		m.ResetLangs()
		return nil
	case question.EdgeQuiz:
		m.ResetQuiz()
		return nil
	case question.EdgeCorrectAnswer:
		m.ResetCorrectAnswer()
		return nil
	}
	return fmt.Errorf("unknown Question edge %s", name)
}

// QuestionLangsMutation represents an operation that mutates the QuestionLangs nodes in the graph.
type QuestionLangsMutation struct {
	config
	op              Op
	typ             string
	id              *int
	title           *string
	body            *string
	explanation     *string
	clearedFields   map[string]struct{}
	i18n            *int
	clearedi18n     bool
	question        *int
	clearedquestion bool
	done            bool
	oldValue        func(context.Context) (*QuestionLangs, error)
	predicates      []predicate.QuestionLangs
}

var _ ent.Mutation = (*QuestionLangsMutation)(nil)

// questionlangsOption allows management of the mutation configuration using functional options.
type questionlangsOption func(*QuestionLangsMutation)

// newQuestionLangsMutation creates new mutation for the QuestionLangs entity.
func newQuestionLangsMutation(c config, op Op, opts ...questionlangsOption) *QuestionLangsMutation {
	m := &QuestionLangsMutation{
		config:        c,
		op:            op,
		typ:           TypeQuestionLangs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuestionLangsID sets the ID field of the mutation.
func withQuestionLangsID(id int) questionlangsOption {
	return func(m *QuestionLangsMutation) {
		var (
			err   error
			once  sync.Once
			value *QuestionLangs
		)
		m.oldValue = func(ctx context.Context) (*QuestionLangs, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuestionLangs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuestionLangs sets the old QuestionLangs of the mutation.
func withQuestionLangs(node *QuestionLangs) questionlangsOption {
	return func(m *QuestionLangsMutation) {
		m.oldValue = func(context.Context) (*QuestionLangs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuestionLangsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuestionLangsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *QuestionLangsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetTitle sets the "title" field.
func (m *QuestionLangsMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *QuestionLangsMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the QuestionLangs entity.
// If the QuestionLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionLangsMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *QuestionLangsMutation) ResetTitle() {
	m.title = nil
}

// SetBody sets the "body" field.
func (m *QuestionLangsMutation) SetBody(s string) {
	m.body = &s
}

// Body returns the value of the "body" field in the mutation.
func (m *QuestionLangsMutation) Body() (r string, exists bool) {
	v := m.body
	if v == nil {
		return
	}
	return *v, true
}

// OldBody returns the old "body" field's value of the QuestionLangs entity.
// If the QuestionLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionLangsMutation) OldBody(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldBody is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldBody requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBody: %w", err)
	}
	return oldValue.Body, nil
}

// ResetBody resets all changes to the "body" field.
func (m *QuestionLangsMutation) ResetBody() {
	m.body = nil
}

// SetExplanation sets the "explanation" field.
func (m *QuestionLangsMutation) SetExplanation(s string) {
	m.explanation = &s
}

// Explanation returns the value of the "explanation" field in the mutation.
func (m *QuestionLangsMutation) Explanation() (r string, exists bool) {
	v := m.explanation
	if v == nil {
		return
	}
	return *v, true
}

// OldExplanation returns the old "explanation" field's value of the QuestionLangs entity.
// If the QuestionLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuestionLangsMutation) OldExplanation(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldExplanation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldExplanation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExplanation: %w", err)
	}
	return oldValue.Explanation, nil
}

// ResetExplanation resets all changes to the "explanation" field.
func (m *QuestionLangsMutation) ResetExplanation() {
	m.explanation = nil
}

// SetI18nID sets the "i18n" edge to the I18n entity by id.
func (m *QuestionLangsMutation) SetI18nID(id int) {
	m.i18n = &id
}

// ClearI18n clears the "i18n" edge to the I18n entity.
func (m *QuestionLangsMutation) ClearI18n() {
	m.clearedi18n = true
}

// I18nCleared returns if the "i18n" edge to the I18n entity was cleared.
func (m *QuestionLangsMutation) I18nCleared() bool {
	return m.clearedi18n
}

// I18nID returns the "i18n" edge ID in the mutation.
func (m *QuestionLangsMutation) I18nID() (id int, exists bool) {
	if m.i18n != nil {
		return *m.i18n, true
	}
	return
}

// I18nIDs returns the "i18n" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// I18nID instead. It exists only for internal usage by the builders.
func (m *QuestionLangsMutation) I18nIDs() (ids []int) {
	if id := m.i18n; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetI18n resets all changes to the "i18n" edge.
func (m *QuestionLangsMutation) ResetI18n() {
	m.i18n = nil
	m.clearedi18n = false
}

// SetQuestionID sets the "question" edge to the Question entity by id.
func (m *QuestionLangsMutation) SetQuestionID(id int) {
	m.question = &id
}

// ClearQuestion clears the "question" edge to the Question entity.
func (m *QuestionLangsMutation) ClearQuestion() {
	m.clearedquestion = true
}

// QuestionCleared returns if the "question" edge to the Question entity was cleared.
func (m *QuestionLangsMutation) QuestionCleared() bool {
	return m.clearedquestion
}

// QuestionID returns the "question" edge ID in the mutation.
func (m *QuestionLangsMutation) QuestionID() (id int, exists bool) {
	if m.question != nil {
		return *m.question, true
	}
	return
}

// QuestionIDs returns the "question" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuestionID instead. It exists only for internal usage by the builders.
func (m *QuestionLangsMutation) QuestionIDs() (ids []int) {
	if id := m.question; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuestion resets all changes to the "question" edge.
func (m *QuestionLangsMutation) ResetQuestion() {
	m.question = nil
	m.clearedquestion = false
}

// Op returns the operation name.
func (m *QuestionLangsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (QuestionLangs).
func (m *QuestionLangsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuestionLangsMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.title != nil {
		fields = append(fields, questionlangs.FieldTitle)
	}
	if m.body != nil {
		fields = append(fields, questionlangs.FieldBody)
	}
	if m.explanation != nil {
		fields = append(fields, questionlangs.FieldExplanation)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuestionLangsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case questionlangs.FieldTitle:
		return m.Title()
	case questionlangs.FieldBody:
		return m.Body()
	case questionlangs.FieldExplanation:
		return m.Explanation()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuestionLangsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case questionlangs.FieldTitle:
		return m.OldTitle(ctx)
	case questionlangs.FieldBody:
		return m.OldBody(ctx)
	case questionlangs.FieldExplanation:
		return m.OldExplanation(ctx)
	}
	return nil, fmt.Errorf("unknown QuestionLangs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionLangsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case questionlangs.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case questionlangs.FieldBody:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBody(v)
		return nil
	case questionlangs.FieldExplanation:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExplanation(v)
		return nil
	}
	return fmt.Errorf("unknown QuestionLangs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuestionLangsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuestionLangsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuestionLangsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QuestionLangs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuestionLangsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuestionLangsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuestionLangsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuestionLangs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuestionLangsMutation) ResetField(name string) error {
	switch name {
	case questionlangs.FieldTitle:
		m.ResetTitle()
		return nil
	case questionlangs.FieldBody:
		m.ResetBody()
		return nil
	case questionlangs.FieldExplanation:
		m.ResetExplanation()
		return nil
	}
	return fmt.Errorf("unknown QuestionLangs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuestionLangsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.i18n != nil {
		edges = append(edges, questionlangs.EdgeI18n)
	}
	if m.question != nil {
		edges = append(edges, questionlangs.EdgeQuestion)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuestionLangsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case questionlangs.EdgeI18n:
		if id := m.i18n; id != nil {
			return []ent.Value{*id}
		}
	case questionlangs.EdgeQuestion:
		if id := m.question; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuestionLangsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuestionLangsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuestionLangsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedi18n {
		edges = append(edges, questionlangs.EdgeI18n)
	}
	if m.clearedquestion {
		edges = append(edges, questionlangs.EdgeQuestion)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuestionLangsMutation) EdgeCleared(name string) bool {
	switch name {
	case questionlangs.EdgeI18n:
		return m.clearedi18n
	case questionlangs.EdgeQuestion:
		return m.clearedquestion
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuestionLangsMutation) ClearEdge(name string) error {
	switch name {
	case questionlangs.EdgeI18n:
		m.ClearI18n()
		return nil
	case questionlangs.EdgeQuestion:
		m.ClearQuestion()
		return nil
	}
	return fmt.Errorf("unknown QuestionLangs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuestionLangsMutation) ResetEdge(name string) error {
	switch name {
	case questionlangs.EdgeI18n:
		m.ResetI18n()
		return nil
	case questionlangs.EdgeQuestion:
		m.ResetQuestion()
		return nil
	}
	return fmt.Errorf("unknown QuestionLangs edge %s", name)
}

// QuizMutation represents an operation that mutates the Quiz nodes in the graph.
type QuizMutation struct {
	config
	op               Op
	typ              string
	id               *int
	url_img          *string
	clearedFields    map[string]struct{}
	questions        map[int]struct{}
	removedquestions map[int]struct{}
	clearedquestions bool
	langs            map[int]struct{}
	removedlangs     map[int]struct{}
	clearedlangs     bool
	users            map[int]struct{}
	removedusers     map[int]struct{}
	clearedusers     bool
	done             bool
	oldValue         func(context.Context) (*Quiz, error)
	predicates       []predicate.Quiz
}

var _ ent.Mutation = (*QuizMutation)(nil)

// quizOption allows management of the mutation configuration using functional options.
type quizOption func(*QuizMutation)

// newQuizMutation creates new mutation for the Quiz entity.
func newQuizMutation(c config, op Op, opts ...quizOption) *QuizMutation {
	m := &QuizMutation{
		config:        c,
		op:            op,
		typ:           TypeQuiz,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuizID sets the ID field of the mutation.
func withQuizID(id int) quizOption {
	return func(m *QuizMutation) {
		var (
			err   error
			once  sync.Once
			value *Quiz
		)
		m.oldValue = func(ctx context.Context) (*Quiz, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Quiz.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuiz sets the old Quiz of the mutation.
func withQuiz(node *Quiz) quizOption {
	return func(m *QuizMutation) {
		m.oldValue = func(context.Context) (*Quiz, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuizMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuizMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *QuizMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetURLImg sets the "url_img" field.
func (m *QuizMutation) SetURLImg(s string) {
	m.url_img = &s
}

// URLImg returns the value of the "url_img" field in the mutation.
func (m *QuizMutation) URLImg() (r string, exists bool) {
	v := m.url_img
	if v == nil {
		return
	}
	return *v, true
}

// OldURLImg returns the old "url_img" field's value of the Quiz entity.
// If the Quiz object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuizMutation) OldURLImg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldURLImg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldURLImg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURLImg: %w", err)
	}
	return oldValue.URLImg, nil
}

// ResetURLImg resets all changes to the "url_img" field.
func (m *QuizMutation) ResetURLImg() {
	m.url_img = nil
}

// AddQuestionIDs adds the "questions" edge to the Question entity by ids.
func (m *QuizMutation) AddQuestionIDs(ids ...int) {
	if m.questions == nil {
		m.questions = make(map[int]struct{})
	}
	for i := range ids {
		m.questions[ids[i]] = struct{}{}
	}
}

// ClearQuestions clears the "questions" edge to the Question entity.
func (m *QuizMutation) ClearQuestions() {
	m.clearedquestions = true
}

// QuestionsCleared returns if the "questions" edge to the Question entity was cleared.
func (m *QuizMutation) QuestionsCleared() bool {
	return m.clearedquestions
}

// RemoveQuestionIDs removes the "questions" edge to the Question entity by IDs.
func (m *QuizMutation) RemoveQuestionIDs(ids ...int) {
	if m.removedquestions == nil {
		m.removedquestions = make(map[int]struct{})
	}
	for i := range ids {
		m.removedquestions[ids[i]] = struct{}{}
	}
}

// RemovedQuestions returns the removed IDs of the "questions" edge to the Question entity.
func (m *QuizMutation) RemovedQuestionsIDs() (ids []int) {
	for id := range m.removedquestions {
		ids = append(ids, id)
	}
	return
}

// QuestionsIDs returns the "questions" edge IDs in the mutation.
func (m *QuizMutation) QuestionsIDs() (ids []int) {
	for id := range m.questions {
		ids = append(ids, id)
	}
	return
}

// ResetQuestions resets all changes to the "questions" edge.
func (m *QuizMutation) ResetQuestions() {
	m.questions = nil
	m.clearedquestions = false
	m.removedquestions = nil
}

// AddLangIDs adds the "langs" edge to the QuizLangs entity by ids.
func (m *QuizMutation) AddLangIDs(ids ...int) {
	if m.langs == nil {
		m.langs = make(map[int]struct{})
	}
	for i := range ids {
		m.langs[ids[i]] = struct{}{}
	}
}

// ClearLangs clears the "langs" edge to the QuizLangs entity.
func (m *QuizMutation) ClearLangs() {
	m.clearedlangs = true
}

// LangsCleared returns if the "langs" edge to the QuizLangs entity was cleared.
func (m *QuizMutation) LangsCleared() bool {
	return m.clearedlangs
}

// RemoveLangIDs removes the "langs" edge to the QuizLangs entity by IDs.
func (m *QuizMutation) RemoveLangIDs(ids ...int) {
	if m.removedlangs == nil {
		m.removedlangs = make(map[int]struct{})
	}
	for i := range ids {
		m.removedlangs[ids[i]] = struct{}{}
	}
}

// RemovedLangs returns the removed IDs of the "langs" edge to the QuizLangs entity.
func (m *QuizMutation) RemovedLangsIDs() (ids []int) {
	for id := range m.removedlangs {
		ids = append(ids, id)
	}
	return
}

// LangsIDs returns the "langs" edge IDs in the mutation.
func (m *QuizMutation) LangsIDs() (ids []int) {
	for id := range m.langs {
		ids = append(ids, id)
	}
	return
}

// ResetLangs resets all changes to the "langs" edge.
func (m *QuizMutation) ResetLangs() {
	m.langs = nil
	m.clearedlangs = false
	m.removedlangs = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *QuizMutation) AddUserIDs(ids ...int) {
	if m.users == nil {
		m.users = make(map[int]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *QuizMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared returns if the "users" edge to the User entity was cleared.
func (m *QuizMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *QuizMutation) RemoveUserIDs(ids ...int) {
	if m.removedusers == nil {
		m.removedusers = make(map[int]struct{})
	}
	for i := range ids {
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *QuizMutation) RemovedUsersIDs() (ids []int) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *QuizMutation) UsersIDs() (ids []int) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *QuizMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// Op returns the operation name.
func (m *QuizMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Quiz).
func (m *QuizMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuizMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.url_img != nil {
		fields = append(fields, quiz.FieldURLImg)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuizMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quiz.FieldURLImg:
		return m.URLImg()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuizMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quiz.FieldURLImg:
		return m.OldURLImg(ctx)
	}
	return nil, fmt.Errorf("unknown Quiz field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuizMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quiz.FieldURLImg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURLImg(v)
		return nil
	}
	return fmt.Errorf("unknown Quiz field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuizMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuizMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuizMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Quiz numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuizMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuizMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuizMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Quiz nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuizMutation) ResetField(name string) error {
	switch name {
	case quiz.FieldURLImg:
		m.ResetURLImg()
		return nil
	}
	return fmt.Errorf("unknown Quiz field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuizMutation) AddedEdges() []string {
	edges := make([]string, 0, 3)
	if m.questions != nil {
		edges = append(edges, quiz.EdgeQuestions)
	}
	if m.langs != nil {
		edges = append(edges, quiz.EdgeLangs)
	}
	if m.users != nil {
		edges = append(edges, quiz.EdgeUsers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuizMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case quiz.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.questions))
		for id := range m.questions {
			ids = append(ids, id)
		}
		return ids
	case quiz.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.langs))
		for id := range m.langs {
			ids = append(ids, id)
		}
		return ids
	case quiz.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuizMutation) RemovedEdges() []string {
	edges := make([]string, 0, 3)
	if m.removedquestions != nil {
		edges = append(edges, quiz.EdgeQuestions)
	}
	if m.removedlangs != nil {
		edges = append(edges, quiz.EdgeLangs)
	}
	if m.removedusers != nil {
		edges = append(edges, quiz.EdgeUsers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuizMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case quiz.EdgeQuestions:
		ids := make([]ent.Value, 0, len(m.removedquestions))
		for id := range m.removedquestions {
			ids = append(ids, id)
		}
		return ids
	case quiz.EdgeLangs:
		ids := make([]ent.Value, 0, len(m.removedlangs))
		for id := range m.removedlangs {
			ids = append(ids, id)
		}
		return ids
	case quiz.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuizMutation) ClearedEdges() []string {
	edges := make([]string, 0, 3)
	if m.clearedquestions {
		edges = append(edges, quiz.EdgeQuestions)
	}
	if m.clearedlangs {
		edges = append(edges, quiz.EdgeLangs)
	}
	if m.clearedusers {
		edges = append(edges, quiz.EdgeUsers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuizMutation) EdgeCleared(name string) bool {
	switch name {
	case quiz.EdgeQuestions:
		return m.clearedquestions
	case quiz.EdgeLangs:
		return m.clearedlangs
	case quiz.EdgeUsers:
		return m.clearedusers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuizMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Quiz unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuizMutation) ResetEdge(name string) error {
	switch name {
	case quiz.EdgeQuestions:
		m.ResetQuestions()
		return nil
	case quiz.EdgeLangs:
		m.ResetLangs()
		return nil
	case quiz.EdgeUsers:
		m.ResetUsers()
		return nil
	}
	return fmt.Errorf("unknown Quiz edge %s", name)
}

// QuizLangsMutation represents an operation that mutates the QuizLangs nodes in the graph.
type QuizLangsMutation struct {
	config
	op            Op
	typ           string
	id            *int
	name          *string
	description   *string
	clearedFields map[string]struct{}
	quiz          *int
	clearedquiz   bool
	i18n          *int
	clearedi18n   bool
	done          bool
	oldValue      func(context.Context) (*QuizLangs, error)
	predicates    []predicate.QuizLangs
}

var _ ent.Mutation = (*QuizLangsMutation)(nil)

// quizlangsOption allows management of the mutation configuration using functional options.
type quizlangsOption func(*QuizLangsMutation)

// newQuizLangsMutation creates new mutation for the QuizLangs entity.
func newQuizLangsMutation(c config, op Op, opts ...quizlangsOption) *QuizLangsMutation {
	m := &QuizLangsMutation{
		config:        c,
		op:            op,
		typ:           TypeQuizLangs,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQuizLangsID sets the ID field of the mutation.
func withQuizLangsID(id int) quizlangsOption {
	return func(m *QuizLangsMutation) {
		var (
			err   error
			once  sync.Once
			value *QuizLangs
		)
		m.oldValue = func(ctx context.Context) (*QuizLangs, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().QuizLangs.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQuizLangs sets the old QuizLangs of the mutation.
func withQuizLangs(node *QuizLangs) quizlangsOption {
	return func(m *QuizLangsMutation) {
		m.oldValue = func(context.Context) (*QuizLangs, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QuizLangsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QuizLangsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *QuizLangsMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *QuizLangsMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *QuizLangsMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the QuizLangs entity.
// If the QuizLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuizLangsMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *QuizLangsMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *QuizLangsMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *QuizLangsMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the QuizLangs entity.
// If the QuizLangs object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QuizLangsMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ResetDescription resets all changes to the "description" field.
func (m *QuizLangsMutation) ResetDescription() {
	m.description = nil
}

// SetQuizID sets the "quiz" edge to the Quiz entity by id.
func (m *QuizLangsMutation) SetQuizID(id int) {
	m.quiz = &id
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (m *QuizLangsMutation) ClearQuiz() {
	m.clearedquiz = true
}

// QuizCleared returns if the "quiz" edge to the Quiz entity was cleared.
func (m *QuizLangsMutation) QuizCleared() bool {
	return m.clearedquiz
}

// QuizID returns the "quiz" edge ID in the mutation.
func (m *QuizLangsMutation) QuizID() (id int, exists bool) {
	if m.quiz != nil {
		return *m.quiz, true
	}
	return
}

// QuizIDs returns the "quiz" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QuizID instead. It exists only for internal usage by the builders.
func (m *QuizLangsMutation) QuizIDs() (ids []int) {
	if id := m.quiz; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQuiz resets all changes to the "quiz" edge.
func (m *QuizLangsMutation) ResetQuiz() {
	m.quiz = nil
	m.clearedquiz = false
}

// SetI18nID sets the "i18n" edge to the I18n entity by id.
func (m *QuizLangsMutation) SetI18nID(id int) {
	m.i18n = &id
}

// ClearI18n clears the "i18n" edge to the I18n entity.
func (m *QuizLangsMutation) ClearI18n() {
	m.clearedi18n = true
}

// I18nCleared returns if the "i18n" edge to the I18n entity was cleared.
func (m *QuizLangsMutation) I18nCleared() bool {
	return m.clearedi18n
}

// I18nID returns the "i18n" edge ID in the mutation.
func (m *QuizLangsMutation) I18nID() (id int, exists bool) {
	if m.i18n != nil {
		return *m.i18n, true
	}
	return
}

// I18nIDs returns the "i18n" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// I18nID instead. It exists only for internal usage by the builders.
func (m *QuizLangsMutation) I18nIDs() (ids []int) {
	if id := m.i18n; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetI18n resets all changes to the "i18n" edge.
func (m *QuizLangsMutation) ResetI18n() {
	m.i18n = nil
	m.clearedi18n = false
}

// Op returns the operation name.
func (m *QuizLangsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (QuizLangs).
func (m *QuizLangsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QuizLangsMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.name != nil {
		fields = append(fields, quizlangs.FieldName)
	}
	if m.description != nil {
		fields = append(fields, quizlangs.FieldDescription)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QuizLangsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case quizlangs.FieldName:
		return m.Name()
	case quizlangs.FieldDescription:
		return m.Description()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QuizLangsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case quizlangs.FieldName:
		return m.OldName(ctx)
	case quizlangs.FieldDescription:
		return m.OldDescription(ctx)
	}
	return nil, fmt.Errorf("unknown QuizLangs field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuizLangsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case quizlangs.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case quizlangs.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	}
	return fmt.Errorf("unknown QuizLangs field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QuizLangsMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QuizLangsMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QuizLangsMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown QuizLangs numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QuizLangsMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QuizLangsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QuizLangsMutation) ClearField(name string) error {
	return fmt.Errorf("unknown QuizLangs nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QuizLangsMutation) ResetField(name string) error {
	switch name {
	case quizlangs.FieldName:
		m.ResetName()
		return nil
	case quizlangs.FieldDescription:
		m.ResetDescription()
		return nil
	}
	return fmt.Errorf("unknown QuizLangs field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QuizLangsMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.quiz != nil {
		edges = append(edges, quizlangs.EdgeQuiz)
	}
	if m.i18n != nil {
		edges = append(edges, quizlangs.EdgeI18n)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QuizLangsMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case quizlangs.EdgeQuiz:
		if id := m.quiz; id != nil {
			return []ent.Value{*id}
		}
	case quizlangs.EdgeI18n:
		if id := m.i18n; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QuizLangsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QuizLangsMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QuizLangsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedquiz {
		edges = append(edges, quizlangs.EdgeQuiz)
	}
	if m.clearedi18n {
		edges = append(edges, quizlangs.EdgeI18n)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QuizLangsMutation) EdgeCleared(name string) bool {
	switch name {
	case quizlangs.EdgeQuiz:
		return m.clearedquiz
	case quizlangs.EdgeI18n:
		return m.clearedi18n
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QuizLangsMutation) ClearEdge(name string) error {
	switch name {
	case quizlangs.EdgeQuiz:
		m.ClearQuiz()
		return nil
	case quizlangs.EdgeI18n:
		m.ClearI18n()
		return nil
	}
	return fmt.Errorf("unknown QuizLangs unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QuizLangsMutation) ResetEdge(name string) error {
	switch name {
	case quizlangs.EdgeQuiz:
		m.ResetQuiz()
		return nil
	case quizlangs.EdgeI18n:
		m.ResetI18n()
		return nil
	}
	return fmt.Errorf("unknown QuizLangs edge %s", name)
}

// ResponseMutation represents an operation that mutates the Response nodes in the graph.
type ResponseMutation struct {
	config
	op            Op
	typ           string
	id            *int
	created_at    *time.Time
	clearedFields map[string]struct{}
	user          *int
	cleareduser   bool
	answer        *int
	clearedanswer bool
	done          bool
	oldValue      func(context.Context) (*Response, error)
	predicates    []predicate.Response
}

var _ ent.Mutation = (*ResponseMutation)(nil)

// responseOption allows management of the mutation configuration using functional options.
type responseOption func(*ResponseMutation)

// newResponseMutation creates new mutation for the Response entity.
func newResponseMutation(c config, op Op, opts ...responseOption) *ResponseMutation {
	m := &ResponseMutation{
		config:        c,
		op:            op,
		typ:           TypeResponse,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withResponseID sets the ID field of the mutation.
func withResponseID(id int) responseOption {
	return func(m *ResponseMutation) {
		var (
			err   error
			once  sync.Once
			value *Response
		)
		m.oldValue = func(ctx context.Context) (*Response, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Response.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withResponse sets the old Response of the mutation.
func withResponse(node *Response) responseOption {
	return func(m *ResponseMutation) {
		m.oldValue = func(context.Context) (*Response, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ResponseMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ResponseMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *ResponseMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCreatedAt sets the "created_at" field.
func (m *ResponseMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ResponseMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Response entity.
// If the Response object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ResponseMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ResponseMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *ResponseMutation) SetUserID(id int) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *ResponseMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared returns if the "user" edge to the User entity was cleared.
func (m *ResponseMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *ResponseMutation) UserID() (id int, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) UserIDs() (ids []int) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *ResponseMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// SetAnswerID sets the "answer" edge to the Answer entity by id.
func (m *ResponseMutation) SetAnswerID(id int) {
	m.answer = &id
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (m *ResponseMutation) ClearAnswer() {
	m.clearedanswer = true
}

// AnswerCleared returns if the "answer" edge to the Answer entity was cleared.
func (m *ResponseMutation) AnswerCleared() bool {
	return m.clearedanswer
}

// AnswerID returns the "answer" edge ID in the mutation.
func (m *ResponseMutation) AnswerID() (id int, exists bool) {
	if m.answer != nil {
		return *m.answer, true
	}
	return
}

// AnswerIDs returns the "answer" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// AnswerID instead. It exists only for internal usage by the builders.
func (m *ResponseMutation) AnswerIDs() (ids []int) {
	if id := m.answer; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetAnswer resets all changes to the "answer" edge.
func (m *ResponseMutation) ResetAnswer() {
	m.answer = nil
	m.clearedanswer = false
}

// Op returns the operation name.
func (m *ResponseMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Response).
func (m *ResponseMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ResponseMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m.created_at != nil {
		fields = append(fields, response.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ResponseMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case response.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ResponseMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case response.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Response field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) SetField(name string, value ent.Value) error {
	switch name {
	case response.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ResponseMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ResponseMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ResponseMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Response numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ResponseMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ResponseMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ResponseMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Response nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ResponseMutation) ResetField(name string) error {
	switch name {
	case response.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Response field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ResponseMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.user != nil {
		edges = append(edges, response.EdgeUser)
	}
	if m.answer != nil {
		edges = append(edges, response.EdgeAnswer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ResponseMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case response.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	case response.EdgeAnswer:
		if id := m.answer; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ResponseMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ResponseMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ResponseMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.cleareduser {
		edges = append(edges, response.EdgeUser)
	}
	if m.clearedanswer {
		edges = append(edges, response.EdgeAnswer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ResponseMutation) EdgeCleared(name string) bool {
	switch name {
	case response.EdgeUser:
		return m.cleareduser
	case response.EdgeAnswer:
		return m.clearedanswer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ResponseMutation) ClearEdge(name string) error {
	switch name {
	case response.EdgeUser:
		m.ClearUser()
		return nil
	case response.EdgeAnswer:
		m.ClearAnswer()
		return nil
	}
	return fmt.Errorf("unknown Response unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ResponseMutation) ResetEdge(name string) error {
	switch name {
	case response.EdgeUser:
		m.ResetUser()
		return nil
	case response.EdgeAnswer:
		m.ResetAnswer()
		return nil
	}
	return fmt.Errorf("unknown Response edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op               Op
	typ              string
	id               *int
	name             *string
	email            *string
	created_at       *time.Time
	clearedFields    map[string]struct{}
	responses        map[int]struct{}
	removedresponses map[int]struct{}
	clearedresponses bool
	quizes           map[int]struct{}
	removedquizes    map[int]struct{}
	clearedquizes    bool
	done             bool
	oldValue         func(context.Context) (*User, error)
	predicates       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id int) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *UserMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *UserMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *UserMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *UserMutation) ResetName() {
	m.name = nil
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddResponseIDs adds the "responses" edge to the Response entity by ids.
func (m *UserMutation) AddResponseIDs(ids ...int) {
	if m.responses == nil {
		m.responses = make(map[int]struct{})
	}
	for i := range ids {
		m.responses[ids[i]] = struct{}{}
	}
}

// ClearResponses clears the "responses" edge to the Response entity.
func (m *UserMutation) ClearResponses() {
	m.clearedresponses = true
}

// ResponsesCleared returns if the "responses" edge to the Response entity was cleared.
func (m *UserMutation) ResponsesCleared() bool {
	return m.clearedresponses
}

// RemoveResponseIDs removes the "responses" edge to the Response entity by IDs.
func (m *UserMutation) RemoveResponseIDs(ids ...int) {
	if m.removedresponses == nil {
		m.removedresponses = make(map[int]struct{})
	}
	for i := range ids {
		m.removedresponses[ids[i]] = struct{}{}
	}
}

// RemovedResponses returns the removed IDs of the "responses" edge to the Response entity.
func (m *UserMutation) RemovedResponsesIDs() (ids []int) {
	for id := range m.removedresponses {
		ids = append(ids, id)
	}
	return
}

// ResponsesIDs returns the "responses" edge IDs in the mutation.
func (m *UserMutation) ResponsesIDs() (ids []int) {
	for id := range m.responses {
		ids = append(ids, id)
	}
	return
}

// ResetResponses resets all changes to the "responses" edge.
func (m *UserMutation) ResetResponses() {
	m.responses = nil
	m.clearedresponses = false
	m.removedresponses = nil
}

// AddQuizeIDs adds the "quizes" edge to the Quiz entity by ids.
func (m *UserMutation) AddQuizeIDs(ids ...int) {
	if m.quizes == nil {
		m.quizes = make(map[int]struct{})
	}
	for i := range ids {
		m.quizes[ids[i]] = struct{}{}
	}
}

// ClearQuizes clears the "quizes" edge to the Quiz entity.
func (m *UserMutation) ClearQuizes() {
	m.clearedquizes = true
}

// QuizesCleared returns if the "quizes" edge to the Quiz entity was cleared.
func (m *UserMutation) QuizesCleared() bool {
	return m.clearedquizes
}

// RemoveQuizeIDs removes the "quizes" edge to the Quiz entity by IDs.
func (m *UserMutation) RemoveQuizeIDs(ids ...int) {
	if m.removedquizes == nil {
		m.removedquizes = make(map[int]struct{})
	}
	for i := range ids {
		m.removedquizes[ids[i]] = struct{}{}
	}
}

// RemovedQuizes returns the removed IDs of the "quizes" edge to the Quiz entity.
func (m *UserMutation) RemovedQuizesIDs() (ids []int) {
	for id := range m.removedquizes {
		ids = append(ids, id)
	}
	return
}

// QuizesIDs returns the "quizes" edge IDs in the mutation.
func (m *UserMutation) QuizesIDs() (ids []int) {
	for id := range m.quizes {
		ids = append(ids, id)
	}
	return
}

// ResetQuizes resets all changes to the "quizes" edge.
func (m *UserMutation) ResetQuizes() {
	m.quizes = nil
	m.clearedquizes = false
	m.removedquizes = nil
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 3)
	if m.name != nil {
		fields = append(fields, user.FieldName)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldName:
		return m.Name()
	case user.FieldEmail:
		return m.Email()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldName:
		return m.OldName(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldName:
		m.ResetName()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.responses != nil {
		edges = append(edges, user.EdgeResponses)
	}
	if m.quizes != nil {
		edges = append(edges, user.EdgeQuizes)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.responses))
		for id := range m.responses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQuizes:
		ids := make([]ent.Value, 0, len(m.quizes))
		for id := range m.quizes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedresponses != nil {
		edges = append(edges, user.EdgeResponses)
	}
	if m.removedquizes != nil {
		edges = append(edges, user.EdgeQuizes)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgeResponses:
		ids := make([]ent.Value, 0, len(m.removedresponses))
		for id := range m.removedresponses {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeQuizes:
		ids := make([]ent.Value, 0, len(m.removedquizes))
		for id := range m.removedquizes {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedresponses {
		edges = append(edges, user.EdgeResponses)
	}
	if m.clearedquizes {
		edges = append(edges, user.EdgeQuizes)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgeResponses:
		return m.clearedresponses
	case user.EdgeQuizes:
		return m.clearedquizes
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgeResponses:
		m.ResetResponses()
		return nil
	case user.EdgeQuizes:
		m.ResetQuizes()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}
