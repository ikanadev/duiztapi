// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/answerlangs"
	"github.com/vmkevv/duiztapi/ent/i18n"
)

// AnswerLangs is the model entity for the AnswerLangs schema.
type AnswerLangs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AnswerLangsQuery when eager-loading is set.
	Edges             AnswerLangsEdges `json:"edges"`
	answer_langs      *int
	i18n_answer_langs *int
}

// AnswerLangsEdges holds the relations/edges for other nodes in the graph.
type AnswerLangsEdges struct {
	// Answer holds the value of the answer edge.
	Answer *Answer
	// I18n holds the value of the i18n edge.
	I18n *I18n
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// AnswerOrErr returns the Answer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnswerLangsEdges) AnswerOrErr() (*Answer, error) {
	if e.loadedTypes[0] {
		if e.Answer == nil {
			// The edge answer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.Answer, nil
	}
	return nil, &NotLoadedError{edge: "answer"}
}

// I18nOrErr returns the I18n value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AnswerLangsEdges) I18nOrErr() (*I18n, error) {
	if e.loadedTypes[1] {
		if e.I18n == nil {
			// The edge i18n was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: i18n.Label}
		}
		return e.I18n, nil
	}
	return nil, &NotLoadedError{edge: "i18n"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AnswerLangs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case answerlangs.FieldID:
			values[i] = &sql.NullInt64{}
		case answerlangs.FieldText:
			values[i] = &sql.NullString{}
		case answerlangs.ForeignKeys[0]: // answer_langs
			values[i] = &sql.NullInt64{}
		case answerlangs.ForeignKeys[1]: // i18n_answer_langs
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type AnswerLangs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AnswerLangs fields.
func (al *AnswerLangs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case answerlangs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			al.ID = int(value.Int64)
		case answerlangs.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				al.Text = value.String
			}
		case answerlangs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field answer_langs", value)
			} else if value.Valid {
				al.answer_langs = new(int)
				*al.answer_langs = int(value.Int64)
			}
		case answerlangs.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field i18n_answer_langs", value)
			} else if value.Valid {
				al.i18n_answer_langs = new(int)
				*al.i18n_answer_langs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAnswer queries the "answer" edge of the AnswerLangs entity.
func (al *AnswerLangs) QueryAnswer() *AnswerQuery {
	return (&AnswerLangsClient{config: al.config}).QueryAnswer(al)
}

// QueryI18n queries the "i18n" edge of the AnswerLangs entity.
func (al *AnswerLangs) QueryI18n() *I18nQuery {
	return (&AnswerLangsClient{config: al.config}).QueryI18n(al)
}

// Update returns a builder for updating this AnswerLangs.
// Note that you need to call AnswerLangs.Unwrap() before calling this method if this AnswerLangs
// was returned from a transaction, and the transaction was committed or rolled back.
func (al *AnswerLangs) Update() *AnswerLangsUpdateOne {
	return (&AnswerLangsClient{config: al.config}).UpdateOne(al)
}

// Unwrap unwraps the AnswerLangs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (al *AnswerLangs) Unwrap() *AnswerLangs {
	tx, ok := al.config.driver.(*txDriver)
	if !ok {
		panic("ent: AnswerLangs is not a transactional entity")
	}
	al.config.driver = tx.drv
	return al
}

// String implements the fmt.Stringer.
func (al *AnswerLangs) String() string {
	var builder strings.Builder
	builder.WriteString("AnswerLangs(")
	builder.WriteString(fmt.Sprintf("id=%v", al.ID))
	builder.WriteString(", text=")
	builder.WriteString(al.Text)
	builder.WriteByte(')')
	return builder.String()
}

// AnswerLangsSlice is a parsable slice of AnswerLangs.
type AnswerLangsSlice []*AnswerLangs

func (al AnswerLangsSlice) config(cfg config) {
	for _i := range al {
		al[_i].config = cfg
	}
}
