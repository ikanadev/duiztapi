// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/questionlangs"
)

// QuestionLangs is the model entity for the QuestionLangs schema.
type QuestionLangs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Title holds the value of the "title" field.
	Title string `json:"title,omitempty"`
	// Body holds the value of the "body" field.
	Body string `json:"body,omitempty"`
	// Explanation holds the value of the "explanation" field.
	Explanation string `json:"explanation,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionLangsQuery when eager-loading is set.
	Edges               QuestionLangsEdges `json:"edges"`
	i18n_question_langs *int
	question_langs      *int
}

// QuestionLangsEdges holds the relations/edges for other nodes in the graph.
type QuestionLangsEdges struct {
	// I18n holds the value of the i18n edge.
	I18n *I18n
	// Question holds the value of the question edge.
	Question *Question
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// I18nOrErr returns the I18n value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionLangsEdges) I18nOrErr() (*I18n, error) {
	if e.loadedTypes[0] {
		if e.I18n == nil {
			// The edge i18n was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: i18n.Label}
		}
		return e.I18n, nil
	}
	return nil, &NotLoadedError{edge: "i18n"}
}

// QuestionOrErr returns the Question value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionLangsEdges) QuestionOrErr() (*Question, error) {
	if e.loadedTypes[1] {
		if e.Question == nil {
			// The edge question was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: question.Label}
		}
		return e.Question, nil
	}
	return nil, &NotLoadedError{edge: "question"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuestionLangs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case questionlangs.FieldID:
			values[i] = &sql.NullInt64{}
		case questionlangs.FieldTitle, questionlangs.FieldBody, questionlangs.FieldExplanation:
			values[i] = &sql.NullString{}
		case questionlangs.ForeignKeys[0]: // i18n_question_langs
			values[i] = &sql.NullInt64{}
		case questionlangs.ForeignKeys[1]: // question_langs
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type QuestionLangs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuestionLangs fields.
func (ql *QuestionLangs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case questionlangs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ql.ID = int(value.Int64)
		case questionlangs.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field title", values[i])
			} else if value.Valid {
				ql.Title = value.String
			}
		case questionlangs.FieldBody:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field body", values[i])
			} else if value.Valid {
				ql.Body = value.String
			}
		case questionlangs.FieldExplanation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field explanation", values[i])
			} else if value.Valid {
				ql.Explanation = value.String
			}
		case questionlangs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field i18n_question_langs", value)
			} else if value.Valid {
				ql.i18n_question_langs = new(int)
				*ql.i18n_question_langs = int(value.Int64)
			}
		case questionlangs.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_langs", value)
			} else if value.Valid {
				ql.question_langs = new(int)
				*ql.question_langs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryI18n queries the "i18n" edge of the QuestionLangs entity.
func (ql *QuestionLangs) QueryI18n() *I18nQuery {
	return (&QuestionLangsClient{config: ql.config}).QueryI18n(ql)
}

// QueryQuestion queries the "question" edge of the QuestionLangs entity.
func (ql *QuestionLangs) QueryQuestion() *QuestionQuery {
	return (&QuestionLangsClient{config: ql.config}).QueryQuestion(ql)
}

// Update returns a builder for updating this QuestionLangs.
// Note that you need to call QuestionLangs.Unwrap() before calling this method if this QuestionLangs
// was returned from a transaction, and the transaction was committed or rolled back.
func (ql *QuestionLangs) Update() *QuestionLangsUpdateOne {
	return (&QuestionLangsClient{config: ql.config}).UpdateOne(ql)
}

// Unwrap unwraps the QuestionLangs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ql *QuestionLangs) Unwrap() *QuestionLangs {
	tx, ok := ql.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuestionLangs is not a transactional entity")
	}
	ql.config.driver = tx.drv
	return ql
}

// String implements the fmt.Stringer.
func (ql *QuestionLangs) String() string {
	var builder strings.Builder
	builder.WriteString("QuestionLangs(")
	builder.WriteString(fmt.Sprintf("id=%v", ql.ID))
	builder.WriteString(", title=")
	builder.WriteString(ql.Title)
	builder.WriteString(", body=")
	builder.WriteString(ql.Body)
	builder.WriteString(", explanation=")
	builder.WriteString(ql.Explanation)
	builder.WriteByte(')')
	return builder.String()
}

// QuestionLangsSlice is a parsable slice of QuestionLangs.
type QuestionLangsSlice []*QuestionLangs

func (ql QuestionLangsSlice) config(cfg config) {
	for _i := range ql {
		ql[_i].config = cfg
	}
}
