// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/predicate"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/quiz"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
	"github.com/vmkevv/duiztapi/ent/user"
)

// QuizQuery is the builder for querying Quiz entities.
type QuizQuery struct {
	config
	limit      *int
	offset     *int
	order      []OrderFunc
	fields     []string
	predicates []predicate.Quiz
	// eager-loading edges.
	withQuestions *QuestionQuery
	withLangs     *QuizLangsQuery
	withUsers     *UserQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QuizQuery builder.
func (qq *QuizQuery) Where(ps ...predicate.Quiz) *QuizQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit adds a limit step to the query.
func (qq *QuizQuery) Limit(limit int) *QuizQuery {
	qq.limit = &limit
	return qq
}

// Offset adds an offset step to the query.
func (qq *QuizQuery) Offset(offset int) *QuizQuery {
	qq.offset = &offset
	return qq
}

// Order adds an order step to the query.
func (qq *QuizQuery) Order(o ...OrderFunc) *QuizQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryQuestions chains the current query on the "questions" edge.
func (qq *QuizQuery) QueryQuestions() *QuestionQuery {
	query := &QuestionQuery{config: qq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, selector),
			sqlgraph.To(question.Table, question.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quiz.QuestionsTable, quiz.QuestionsColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryLangs chains the current query on the "langs" edge.
func (qq *QuizQuery) QueryLangs() *QuizLangsQuery {
	query := &QuizLangsQuery{config: qq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, selector),
			sqlgraph.To(quizlangs.Table, quizlangs.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, quiz.LangsTable, quiz.LangsColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (qq *QuizQuery) QueryUsers() *UserQuery {
	query := &UserQuery{config: qq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery()
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(quiz.Table, quiz.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, quiz.UsersTable, quiz.UsersPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Quiz entity from the query.
// Returns a *NotFoundError when no Quiz was found.
func (qq *QuizQuery) First(ctx context.Context) (*Quiz, error) {
	nodes, err := qq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{quiz.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QuizQuery) FirstX(ctx context.Context) *Quiz {
	node, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Quiz ID from the query.
// Returns a *NotFoundError when no Quiz ID was found.
func (qq *QuizQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{quiz.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qq *QuizQuery) FirstIDX(ctx context.Context) int {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Quiz entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when exactly one Quiz entity is not found.
// Returns a *NotFoundError when no Quiz entities are found.
func (qq *QuizQuery) Only(ctx context.Context) (*Quiz, error) {
	nodes, err := qq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{quiz.Label}
	default:
		return nil, &NotSingularError{quiz.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QuizQuery) OnlyX(ctx context.Context) *Quiz {
	node, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Quiz ID in the query.
// Returns a *NotSingularError when exactly one Quiz ID is not found.
// Returns a *NotFoundError when no entities are found.
func (qq *QuizQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = qq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = &NotSingularError{quiz.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qq *QuizQuery) OnlyIDX(ctx context.Context) int {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Quizs.
func (qq *QuizQuery) All(ctx context.Context) ([]*Quiz, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return qq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (qq *QuizQuery) AllX(ctx context.Context) []*Quiz {
	nodes, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Quiz IDs.
func (qq *QuizQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := qq.Select(quiz.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QuizQuery) IDsX(ctx context.Context) []int {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QuizQuery) Count(ctx context.Context) (int, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return qq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QuizQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QuizQuery) Exist(ctx context.Context) (bool, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return qq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QuizQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QuizQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QuizQuery) Clone() *QuizQuery {
	if qq == nil {
		return nil
	}
	return &QuizQuery{
		config:        qq.config,
		limit:         qq.limit,
		offset:        qq.offset,
		order:         append([]OrderFunc{}, qq.order...),
		predicates:    append([]predicate.Quiz{}, qq.predicates...),
		withQuestions: qq.withQuestions.Clone(),
		withLangs:     qq.withLangs.Clone(),
		withUsers:     qq.withUsers.Clone(),
		// clone intermediate query.
		sql:  qq.sql.Clone(),
		path: qq.path,
	}
}

// WithQuestions tells the query-builder to eager-load the nodes that are connected to
// the "questions" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuizQuery) WithQuestions(opts ...func(*QuestionQuery)) *QuizQuery {
	query := &QuestionQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withQuestions = query
	return qq
}

// WithLangs tells the query-builder to eager-load the nodes that are connected to
// the "langs" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuizQuery) WithLangs(opts ...func(*QuizLangsQuery)) *QuizQuery {
	query := &QuizLangsQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withLangs = query
	return qq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QuizQuery) WithUsers(opts ...func(*UserQuery)) *QuizQuery {
	query := &UserQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withUsers = query
	return qq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		URLImg string `json:"url_img,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Quiz.Query().
//		GroupBy(quiz.FieldURLImg).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (qq *QuizQuery) GroupBy(field string, fields ...string) *QuizGroupBy {
	group := &QuizGroupBy{config: qq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return qq.sqlQuery(), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		URLImg string `json:"url_img,omitempty"`
//	}
//
//	client.Quiz.Query().
//		Select(quiz.FieldURLImg).
//		Scan(ctx, &v)
//
func (qq *QuizQuery) Select(field string, fields ...string) *QuizSelect {
	qq.fields = append([]string{field}, fields...)
	return &QuizSelect{QuizQuery: qq}
}

func (qq *QuizQuery) prepareQuery(ctx context.Context) error {
	for _, f := range qq.fields {
		if !quiz.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qq.path != nil {
		prev, err := qq.path(ctx)
		if err != nil {
			return err
		}
		qq.sql = prev
	}
	return nil
}

func (qq *QuizQuery) sqlAll(ctx context.Context) ([]*Quiz, error) {
	var (
		nodes       = []*Quiz{}
		_spec       = qq.querySpec()
		loadedTypes = [3]bool{
			qq.withQuestions != nil,
			qq.withLangs != nil,
			qq.withUsers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Quiz{config: qq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := qq.withQuestions; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Quiz)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Questions = []*Question{}
		}
		query.withFKs = true
		query.Where(predicate.Question(func(s *sql.Selector) {
			s.Where(sql.InValues(quiz.QuestionsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.quiz_questions
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "quiz_questions" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "quiz_questions" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Questions = append(node.Edges.Questions, n)
		}
	}

	if query := qq.withLangs; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		nodeids := make(map[int]*Quiz)
		for i := range nodes {
			fks = append(fks, nodes[i].ID)
			nodeids[nodes[i].ID] = nodes[i]
			nodes[i].Edges.Langs = []*QuizLangs{}
		}
		query.withFKs = true
		query.Where(predicate.QuizLangs(func(s *sql.Selector) {
			s.Where(sql.InValues(quiz.LangsColumn, fks...))
		}))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			fk := n.quiz_langs
			if fk == nil {
				return nil, fmt.Errorf(`foreign-key "quiz_langs" is nil for node %v`, n.ID)
			}
			node, ok := nodeids[*fk]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "quiz_langs" returned %v for node %v`, *fk, n.ID)
			}
			node.Edges.Langs = append(node.Edges.Langs, n)
		}
	}

	if query := qq.withUsers; query != nil {
		fks := make([]driver.Value, 0, len(nodes))
		ids := make(map[int]*Quiz, len(nodes))
		for _, node := range nodes {
			ids[node.ID] = node
			fks = append(fks, node.ID)
			node.Edges.Users = []*User{}
		}
		var (
			edgeids []int
			edges   = make(map[int][]*Quiz)
		)
		_spec := &sqlgraph.EdgeQuerySpec{
			Edge: &sqlgraph.EdgeSpec{
				Inverse: true,
				Table:   quiz.UsersTable,
				Columns: quiz.UsersPrimaryKey,
			},
			Predicate: func(s *sql.Selector) {
				s.Where(sql.InValues(quiz.UsersPrimaryKey[1], fks...))
			},

			ScanValues: func() [2]interface{} {
				return [2]interface{}{&sql.NullInt64{}, &sql.NullInt64{}}
			},
			Assign: func(out, in interface{}) error {
				eout, ok := out.(*sql.NullInt64)
				if !ok || eout == nil {
					return fmt.Errorf("unexpected id value for edge-out")
				}
				ein, ok := in.(*sql.NullInt64)
				if !ok || ein == nil {
					return fmt.Errorf("unexpected id value for edge-in")
				}
				outValue := int(eout.Int64)
				inValue := int(ein.Int64)
				node, ok := ids[outValue]
				if !ok {
					return fmt.Errorf("unexpected node id in edges: %v", outValue)
				}
				edgeids = append(edgeids, inValue)
				edges[inValue] = append(edges[inValue], node)
				return nil
			},
		}
		if err := sqlgraph.QueryEdges(ctx, qq.driver, _spec); err != nil {
			return nil, fmt.Errorf(`query edges "users": %v`, err)
		}
		query.Where(user.IDIn(edgeids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := edges[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Users = append(nodes[i].Edges.Users, n)
			}
		}
	}

	return nodes, nil
}

func (qq *QuizQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QuizQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := qq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %v", err)
	}
	return n > 0, nil
}

func (qq *QuizQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quiz.Table,
			Columns: quiz.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quiz.FieldID,
			},
		},
		From:   qq.sql,
		Unique: true,
	}
	if fields := qq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, quiz.FieldID)
		for i := range fields {
			if fields[i] != quiz.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector, quiz.ValidColumn)
			}
		}
	}
	return _spec
}

func (qq *QuizQuery) sqlQuery() *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(quiz.Table)
	selector := builder.Select(t1.Columns(quiz.Columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(quiz.Columns...)...)
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector, quiz.ValidColumn)
	}
	if offset := qq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// QuizGroupBy is the group-by builder for Quiz entities.
type QuizGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QuizGroupBy) Aggregate(fns ...AggregateFunc) *QuizGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the group-by query and scans the result into the given value.
func (qgb *QuizGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := qgb.path(ctx)
	if err != nil {
		return err
	}
	qgb.sql = query
	return qgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qgb *QuizGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := qgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuizGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qgb *QuizGroupBy) StringsX(ctx context.Context) []string {
	v, err := qgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qgb *QuizGroupBy) StringX(ctx context.Context) string {
	v, err := qgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuizGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qgb *QuizGroupBy) IntsX(ctx context.Context) []int {
	v, err := qgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qgb *QuizGroupBy) IntX(ctx context.Context) int {
	v, err := qgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuizGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qgb *QuizGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := qgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qgb *QuizGroupBy) Float64X(ctx context.Context) float64 {
	v, err := qgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QuizGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qgb *QuizGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := qgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QuizGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qgb *QuizGroupBy) BoolX(ctx context.Context) bool {
	v, err := qgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qgb *QuizGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range qgb.fields {
		if !quiz.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := qgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qgb *QuizGroupBy) sqlQuery() *sql.Selector {
	selector := qgb.sql
	columns := make([]string, 0, len(qgb.fields)+len(qgb.fns))
	columns = append(columns, qgb.fields...)
	for _, fn := range qgb.fns {
		columns = append(columns, fn(selector, quiz.ValidColumn))
	}
	return selector.Select(columns...).GroupBy(qgb.fields...)
}

// QuizSelect is the builder for selecting fields of Quiz entities.
type QuizSelect struct {
	*QuizQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (qs *QuizSelect) Scan(ctx context.Context, v interface{}) error {
	if err := qs.prepareQuery(ctx); err != nil {
		return err
	}
	qs.sql = qs.QuizQuery.sqlQuery()
	return qs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qs *QuizSelect) ScanX(ctx context.Context, v interface{}) {
	if err := qs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Strings(ctx context.Context) ([]string, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuizSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qs *QuizSelect) StringsX(ctx context.Context) []string {
	v, err := qs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qs *QuizSelect) StringX(ctx context.Context) string {
	v, err := qs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Ints(ctx context.Context) ([]int, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuizSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qs *QuizSelect) IntsX(ctx context.Context) []int {
	v, err := qs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qs *QuizSelect) IntX(ctx context.Context) int {
	v, err := qs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuizSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qs *QuizSelect) Float64sX(ctx context.Context) []float64 {
	v, err := qs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qs *QuizSelect) Float64X(ctx context.Context) float64 {
	v, err := qs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QuizSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qs *QuizSelect) BoolsX(ctx context.Context) []bool {
	v, err := qs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (qs *QuizSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{quiz.Label}
	default:
		err = fmt.Errorf("ent: QuizSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qs *QuizSelect) BoolX(ctx context.Context) bool {
	v, err := qs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qs *QuizSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qs.sqlQuery().Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qs *QuizSelect) sqlQuery() sql.Querier {
	selector := qs.sql
	selector.Select(selector.Columns(qs.fields...)...)
	return selector
}
