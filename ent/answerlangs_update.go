// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/answerlangs"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/predicate"
)

// AnswerLangsUpdate is the builder for updating AnswerLangs entities.
type AnswerLangsUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerLangsMutation
}

// Where adds a new predicate for the AnswerLangsUpdate builder.
func (alu *AnswerLangsUpdate) Where(ps ...predicate.AnswerLangs) *AnswerLangsUpdate {
	alu.mutation.predicates = append(alu.mutation.predicates, ps...)
	return alu
}

// SetText sets the "text" field.
func (alu *AnswerLangsUpdate) SetText(s string) *AnswerLangsUpdate {
	alu.mutation.SetText(s)
	return alu
}

// SetAnswerID sets the "answer" edge to the Answer entity by ID.
func (alu *AnswerLangsUpdate) SetAnswerID(id int) *AnswerLangsUpdate {
	alu.mutation.SetAnswerID(id)
	return alu
}

// SetNillableAnswerID sets the "answer" edge to the Answer entity by ID if the given value is not nil.
func (alu *AnswerLangsUpdate) SetNillableAnswerID(id *int) *AnswerLangsUpdate {
	if id != nil {
		alu = alu.SetAnswerID(*id)
	}
	return alu
}

// SetAnswer sets the "answer" edge to the Answer entity.
func (alu *AnswerLangsUpdate) SetAnswer(a *Answer) *AnswerLangsUpdate {
	return alu.SetAnswerID(a.ID)
}

// SetI18nID sets the "i18n" edge to the I18n entity by ID.
func (alu *AnswerLangsUpdate) SetI18nID(id int) *AnswerLangsUpdate {
	alu.mutation.SetI18nID(id)
	return alu
}

// SetNillableI18nID sets the "i18n" edge to the I18n entity by ID if the given value is not nil.
func (alu *AnswerLangsUpdate) SetNillableI18nID(id *int) *AnswerLangsUpdate {
	if id != nil {
		alu = alu.SetI18nID(*id)
	}
	return alu
}

// SetI18n sets the "i18n" edge to the I18n entity.
func (alu *AnswerLangsUpdate) SetI18n(i *I18n) *AnswerLangsUpdate {
	return alu.SetI18nID(i.ID)
}

// Mutation returns the AnswerLangsMutation object of the builder.
func (alu *AnswerLangsUpdate) Mutation() *AnswerLangsMutation {
	return alu.mutation
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (alu *AnswerLangsUpdate) ClearAnswer() *AnswerLangsUpdate {
	alu.mutation.ClearAnswer()
	return alu
}

// ClearI18n clears the "i18n" edge to the I18n entity.
func (alu *AnswerLangsUpdate) ClearI18n() *AnswerLangsUpdate {
	alu.mutation.ClearI18n()
	return alu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (alu *AnswerLangsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(alu.hooks) == 0 {
		affected, err = alu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerLangsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			alu.mutation = mutation
			affected, err = alu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(alu.hooks) - 1; i >= 0; i-- {
			mut = alu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, alu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (alu *AnswerLangsUpdate) SaveX(ctx context.Context) int {
	affected, err := alu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (alu *AnswerLangsUpdate) Exec(ctx context.Context) error {
	_, err := alu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (alu *AnswerLangsUpdate) ExecX(ctx context.Context) {
	if err := alu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (alu *AnswerLangsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answerlangs.Table,
			Columns: answerlangs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answerlangs.FieldID,
			},
		},
	}
	if ps := alu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := alu.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answerlangs.FieldText,
		})
	}
	if alu.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.AnswerTable,
			Columns: []string{answerlangs.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.AnswerTable,
			Columns: []string{answerlangs.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if alu.mutation.I18nCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.I18nTable,
			Columns: []string{answerlangs.I18nColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: i18n.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := alu.mutation.I18nIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.I18nTable,
			Columns: []string{answerlangs.I18nColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: i18n.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, alu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answerlangs.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AnswerLangsUpdateOne is the builder for updating a single AnswerLangs entity.
type AnswerLangsUpdateOne struct {
	config
	hooks    []Hook
	mutation *AnswerLangsMutation
}

// SetText sets the "text" field.
func (aluo *AnswerLangsUpdateOne) SetText(s string) *AnswerLangsUpdateOne {
	aluo.mutation.SetText(s)
	return aluo
}

// SetAnswerID sets the "answer" edge to the Answer entity by ID.
func (aluo *AnswerLangsUpdateOne) SetAnswerID(id int) *AnswerLangsUpdateOne {
	aluo.mutation.SetAnswerID(id)
	return aluo
}

// SetNillableAnswerID sets the "answer" edge to the Answer entity by ID if the given value is not nil.
func (aluo *AnswerLangsUpdateOne) SetNillableAnswerID(id *int) *AnswerLangsUpdateOne {
	if id != nil {
		aluo = aluo.SetAnswerID(*id)
	}
	return aluo
}

// SetAnswer sets the "answer" edge to the Answer entity.
func (aluo *AnswerLangsUpdateOne) SetAnswer(a *Answer) *AnswerLangsUpdateOne {
	return aluo.SetAnswerID(a.ID)
}

// SetI18nID sets the "i18n" edge to the I18n entity by ID.
func (aluo *AnswerLangsUpdateOne) SetI18nID(id int) *AnswerLangsUpdateOne {
	aluo.mutation.SetI18nID(id)
	return aluo
}

// SetNillableI18nID sets the "i18n" edge to the I18n entity by ID if the given value is not nil.
func (aluo *AnswerLangsUpdateOne) SetNillableI18nID(id *int) *AnswerLangsUpdateOne {
	if id != nil {
		aluo = aluo.SetI18nID(*id)
	}
	return aluo
}

// SetI18n sets the "i18n" edge to the I18n entity.
func (aluo *AnswerLangsUpdateOne) SetI18n(i *I18n) *AnswerLangsUpdateOne {
	return aluo.SetI18nID(i.ID)
}

// Mutation returns the AnswerLangsMutation object of the builder.
func (aluo *AnswerLangsUpdateOne) Mutation() *AnswerLangsMutation {
	return aluo.mutation
}

// ClearAnswer clears the "answer" edge to the Answer entity.
func (aluo *AnswerLangsUpdateOne) ClearAnswer() *AnswerLangsUpdateOne {
	aluo.mutation.ClearAnswer()
	return aluo
}

// ClearI18n clears the "i18n" edge to the I18n entity.
func (aluo *AnswerLangsUpdateOne) ClearI18n() *AnswerLangsUpdateOne {
	aluo.mutation.ClearI18n()
	return aluo
}

// Save executes the query and returns the updated AnswerLangs entity.
func (aluo *AnswerLangsUpdateOne) Save(ctx context.Context) (*AnswerLangs, error) {
	var (
		err  error
		node *AnswerLangs
	)
	if len(aluo.hooks) == 0 {
		node, err = aluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerLangsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			aluo.mutation = mutation
			node, err = aluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(aluo.hooks) - 1; i >= 0; i-- {
			mut = aluo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, aluo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (aluo *AnswerLangsUpdateOne) SaveX(ctx context.Context) *AnswerLangs {
	node, err := aluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (aluo *AnswerLangsUpdateOne) Exec(ctx context.Context) error {
	_, err := aluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (aluo *AnswerLangsUpdateOne) ExecX(ctx context.Context) {
	if err := aluo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (aluo *AnswerLangsUpdateOne) sqlSave(ctx context.Context) (_node *AnswerLangs, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answerlangs.Table,
			Columns: answerlangs.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answerlangs.FieldID,
			},
		},
	}
	id, ok := aluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing AnswerLangs.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := aluo.mutation.Text(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: answerlangs.FieldText,
		})
	}
	if aluo.mutation.AnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.AnswerTable,
			Columns: []string{answerlangs.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.AnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.AnswerTable,
			Columns: []string{answerlangs.AnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if aluo.mutation.I18nCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.I18nTable,
			Columns: []string{answerlangs.I18nColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: i18n.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := aluo.mutation.I18nIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answerlangs.I18nTable,
			Columns: []string{answerlangs.I18nColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: i18n.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &AnswerLangs{config: aluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, aluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answerlangs.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
