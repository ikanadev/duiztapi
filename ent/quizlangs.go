// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/quiz"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
)

// QuizLangs is the model entity for the QuizLangs schema.
type QuizLangs struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuizLangsQuery when eager-loading is set.
	Edges           QuizLangsEdges `json:"edges"`
	i18n_quiz_langs *int
	quiz_langs      *int
}

// QuizLangsEdges holds the relations/edges for other nodes in the graph.
type QuizLangsEdges struct {
	// Quiz holds the value of the quiz edge.
	Quiz *Quiz
	// I18n holds the value of the i18n edge.
	I18n *I18n
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// QuizOrErr returns the Quiz value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuizLangsEdges) QuizOrErr() (*Quiz, error) {
	if e.loadedTypes[0] {
		if e.Quiz == nil {
			// The edge quiz was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: quiz.Label}
		}
		return e.Quiz, nil
	}
	return nil, &NotLoadedError{edge: "quiz"}
}

// I18nOrErr returns the I18n value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuizLangsEdges) I18nOrErr() (*I18n, error) {
	if e.loadedTypes[1] {
		if e.I18n == nil {
			// The edge i18n was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: i18n.Label}
		}
		return e.I18n, nil
	}
	return nil, &NotLoadedError{edge: "i18n"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*QuizLangs) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case quizlangs.FieldID:
			values[i] = &sql.NullInt64{}
		case quizlangs.FieldName, quizlangs.FieldDescription:
			values[i] = &sql.NullString{}
		case quizlangs.ForeignKeys[0]: // i18n_quiz_langs
			values[i] = &sql.NullInt64{}
		case quizlangs.ForeignKeys[1]: // quiz_langs
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type QuizLangs", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the QuizLangs fields.
func (ql *QuizLangs) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case quizlangs.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ql.ID = int(value.Int64)
		case quizlangs.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				ql.Name = value.String
			}
		case quizlangs.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				ql.Description = value.String
			}
		case quizlangs.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field i18n_quiz_langs", value)
			} else if value.Valid {
				ql.i18n_quiz_langs = new(int)
				*ql.i18n_quiz_langs = int(value.Int64)
			}
		case quizlangs.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quiz_langs", value)
			} else if value.Valid {
				ql.quiz_langs = new(int)
				*ql.quiz_langs = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryQuiz queries the "quiz" edge of the QuizLangs entity.
func (ql *QuizLangs) QueryQuiz() *QuizQuery {
	return (&QuizLangsClient{config: ql.config}).QueryQuiz(ql)
}

// QueryI18n queries the "i18n" edge of the QuizLangs entity.
func (ql *QuizLangs) QueryI18n() *I18nQuery {
	return (&QuizLangsClient{config: ql.config}).QueryI18n(ql)
}

// Update returns a builder for updating this QuizLangs.
// Note that you need to call QuizLangs.Unwrap() before calling this method if this QuizLangs
// was returned from a transaction, and the transaction was committed or rolled back.
func (ql *QuizLangs) Update() *QuizLangsUpdateOne {
	return (&QuizLangsClient{config: ql.config}).UpdateOne(ql)
}

// Unwrap unwraps the QuizLangs entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ql *QuizLangs) Unwrap() *QuizLangs {
	tx, ok := ql.config.driver.(*txDriver)
	if !ok {
		panic("ent: QuizLangs is not a transactional entity")
	}
	ql.config.driver = tx.drv
	return ql
}

// String implements the fmt.Stringer.
func (ql *QuizLangs) String() string {
	var builder strings.Builder
	builder.WriteString("QuizLangs(")
	builder.WriteString(fmt.Sprintf("id=%v", ql.ID))
	builder.WriteString(", name=")
	builder.WriteString(ql.Name)
	builder.WriteString(", description=")
	builder.WriteString(ql.Description)
	builder.WriteByte(')')
	return builder.String()
}

// QuizLangsSlice is a parsable slice of QuizLangs.
type QuizLangsSlice []*QuizLangs

func (ql QuizLangsSlice) config(cfg config) {
	for _i := range ql {
		ql[_i].config = cfg
	}
}
