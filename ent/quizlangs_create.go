// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/quiz"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
)

// QuizLangsCreate is the builder for creating a QuizLangs entity.
type QuizLangsCreate struct {
	config
	mutation *QuizLangsMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (qlc *QuizLangsCreate) SetName(s string) *QuizLangsCreate {
	qlc.mutation.SetName(s)
	return qlc
}

// SetDescription sets the "description" field.
func (qlc *QuizLangsCreate) SetDescription(s string) *QuizLangsCreate {
	qlc.mutation.SetDescription(s)
	return qlc
}

// SetQuizID sets the "quiz" edge to the Quiz entity by ID.
func (qlc *QuizLangsCreate) SetQuizID(id int) *QuizLangsCreate {
	qlc.mutation.SetQuizID(id)
	return qlc
}

// SetNillableQuizID sets the "quiz" edge to the Quiz entity by ID if the given value is not nil.
func (qlc *QuizLangsCreate) SetNillableQuizID(id *int) *QuizLangsCreate {
	if id != nil {
		qlc = qlc.SetQuizID(*id)
	}
	return qlc
}

// SetQuiz sets the "quiz" edge to the Quiz entity.
func (qlc *QuizLangsCreate) SetQuiz(q *Quiz) *QuizLangsCreate {
	return qlc.SetQuizID(q.ID)
}

// SetI18nID sets the "i18n" edge to the I18n entity by ID.
func (qlc *QuizLangsCreate) SetI18nID(id int) *QuizLangsCreate {
	qlc.mutation.SetI18nID(id)
	return qlc
}

// SetNillableI18nID sets the "i18n" edge to the I18n entity by ID if the given value is not nil.
func (qlc *QuizLangsCreate) SetNillableI18nID(id *int) *QuizLangsCreate {
	if id != nil {
		qlc = qlc.SetI18nID(*id)
	}
	return qlc
}

// SetI18n sets the "i18n" edge to the I18n entity.
func (qlc *QuizLangsCreate) SetI18n(i *I18n) *QuizLangsCreate {
	return qlc.SetI18nID(i.ID)
}

// Mutation returns the QuizLangsMutation object of the builder.
func (qlc *QuizLangsCreate) Mutation() *QuizLangsMutation {
	return qlc.mutation
}

// Save creates the QuizLangs in the database.
func (qlc *QuizLangsCreate) Save(ctx context.Context) (*QuizLangs, error) {
	var (
		err  error
		node *QuizLangs
	)
	if len(qlc.hooks) == 0 {
		if err = qlc.check(); err != nil {
			return nil, err
		}
		node, err = qlc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuizLangsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = qlc.check(); err != nil {
				return nil, err
			}
			qlc.mutation = mutation
			node, err = qlc.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(qlc.hooks) - 1; i >= 0; i-- {
			mut = qlc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qlc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (qlc *QuizLangsCreate) SaveX(ctx context.Context) *QuizLangs {
	v, err := qlc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (qlc *QuizLangsCreate) check() error {
	if _, ok := qlc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New("ent: missing required field \"name\"")}
	}
	if _, ok := qlc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New("ent: missing required field \"description\"")}
	}
	return nil
}

func (qlc *QuizLangsCreate) sqlSave(ctx context.Context) (*QuizLangs, error) {
	_node, _spec := qlc.createSpec()
	if err := sqlgraph.CreateNode(ctx, qlc.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (qlc *QuizLangsCreate) createSpec() (*QuizLangs, *sqlgraph.CreateSpec) {
	var (
		_node = &QuizLangs{config: qlc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: quizlangs.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quizlangs.FieldID,
			},
		}
	)
	if value, ok := qlc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quizlangs.FieldName,
		})
		_node.Name = value
	}
	if value, ok := qlc.mutation.Description(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quizlangs.FieldDescription,
		})
		_node.Description = value
	}
	if nodes := qlc.mutation.QuizIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizlangs.QuizTable,
			Columns: []string{quizlangs.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quiz.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := qlc.mutation.I18nIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   quizlangs.I18nTable,
			Columns: []string{quizlangs.I18nColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: i18n.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// QuizLangsCreateBulk is the builder for creating many QuizLangs entities in bulk.
type QuizLangsCreateBulk struct {
	config
	builders []*QuizLangsCreate
}

// Save creates the QuizLangs entities in the database.
func (qlcb *QuizLangsCreateBulk) Save(ctx context.Context) ([]*QuizLangs, error) {
	specs := make([]*sqlgraph.CreateSpec, len(qlcb.builders))
	nodes := make([]*QuizLangs, len(qlcb.builders))
	mutators := make([]Mutator, len(qlcb.builders))
	for i := range qlcb.builders {
		func(i int, root context.Context) {
			builder := qlcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*QuizLangsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, qlcb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, qlcb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, qlcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (qlcb *QuizLangsCreateBulk) SaveX(ctx context.Context) []*QuizLangs {
	v, err := qlcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
