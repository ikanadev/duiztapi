// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"github.com/facebook/ent/dialect/sql"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/quiz"
)

// Question is the model entity for the Question schema.
type Question struct {
	config
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QuestionQuery when eager-loading is set.
	Edges                   QuestionEdges `json:"edges"`
	question_correct_answer *int
	quiz_questions          *int
}

// QuestionEdges holds the relations/edges for other nodes in the graph.
type QuestionEdges struct {
	// Answers holds the value of the answers edge.
	Answers []*Answer
	// Langs holds the value of the langs edge.
	Langs []*QuestionLangs
	// Quiz holds the value of the quiz edge.
	Quiz *Quiz
	// CorrectAnswer holds the value of the correct_answer edge.
	CorrectAnswer *Answer
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// AnswersOrErr returns the Answers value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) AnswersOrErr() ([]*Answer, error) {
	if e.loadedTypes[0] {
		return e.Answers, nil
	}
	return nil, &NotLoadedError{edge: "answers"}
}

// LangsOrErr returns the Langs value or an error if the edge
// was not loaded in eager-loading.
func (e QuestionEdges) LangsOrErr() ([]*QuestionLangs, error) {
	if e.loadedTypes[1] {
		return e.Langs, nil
	}
	return nil, &NotLoadedError{edge: "langs"}
}

// QuizOrErr returns the Quiz value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) QuizOrErr() (*Quiz, error) {
	if e.loadedTypes[2] {
		if e.Quiz == nil {
			// The edge quiz was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: quiz.Label}
		}
		return e.Quiz, nil
	}
	return nil, &NotLoadedError{edge: "quiz"}
}

// CorrectAnswerOrErr returns the CorrectAnswer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QuestionEdges) CorrectAnswerOrErr() (*Answer, error) {
	if e.loadedTypes[3] {
		if e.CorrectAnswer == nil {
			// The edge correct_answer was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: answer.Label}
		}
		return e.CorrectAnswer, nil
	}
	return nil, &NotLoadedError{edge: "correct_answer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Question) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			values[i] = &sql.NullInt64{}
		case question.ForeignKeys[0]: // question_correct_answer
			values[i] = &sql.NullInt64{}
		case question.ForeignKeys[1]: // quiz_questions
			values[i] = &sql.NullInt64{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Question", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Question fields.
func (q *Question) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case question.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			q.ID = int(value.Int64)
		case question.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field question_correct_answer", value)
			} else if value.Valid {
				q.question_correct_answer = new(int)
				*q.question_correct_answer = int(value.Int64)
			}
		case question.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field quiz_questions", value)
			} else if value.Valid {
				q.quiz_questions = new(int)
				*q.quiz_questions = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryAnswers queries the "answers" edge of the Question entity.
func (q *Question) QueryAnswers() *AnswerQuery {
	return (&QuestionClient{config: q.config}).QueryAnswers(q)
}

// QueryLangs queries the "langs" edge of the Question entity.
func (q *Question) QueryLangs() *QuestionLangsQuery {
	return (&QuestionClient{config: q.config}).QueryLangs(q)
}

// QueryQuiz queries the "quiz" edge of the Question entity.
func (q *Question) QueryQuiz() *QuizQuery {
	return (&QuestionClient{config: q.config}).QueryQuiz(q)
}

// QueryCorrectAnswer queries the "correct_answer" edge of the Question entity.
func (q *Question) QueryCorrectAnswer() *AnswerQuery {
	return (&QuestionClient{config: q.config}).QueryCorrectAnswer(q)
}

// Update returns a builder for updating this Question.
// Note that you need to call Question.Unwrap() before calling this method if this Question
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Question) Update() *QuestionUpdateOne {
	return (&QuestionClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Question entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Question) Unwrap() *Question {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Question is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Question) String() string {
	var builder strings.Builder
	builder.WriteString("Question(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteByte(')')
	return builder.String()
}

// Questions is a parsable slice of Question.
type Questions []*Question

func (q Questions) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
