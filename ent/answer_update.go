// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/answerlangs"
	"github.com/vmkevv/duiztapi/ent/predicate"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/response"
)

// AnswerUpdate is the builder for updating Answer entities.
type AnswerUpdate struct {
	config
	hooks    []Hook
	mutation *AnswerMutation
}

// Where adds a new predicate for the AnswerUpdate builder.
func (au *AnswerUpdate) Where(ps ...predicate.Answer) *AnswerUpdate {
	au.mutation.predicates = append(au.mutation.predicates, ps...)
	return au
}

// AddLangIDs adds the "langs" edge to the AnswerLangs entity by IDs.
func (au *AnswerUpdate) AddLangIDs(ids ...int) *AnswerUpdate {
	au.mutation.AddLangIDs(ids...)
	return au
}

// AddLangs adds the "langs" edges to the AnswerLangs entity.
func (au *AnswerUpdate) AddLangs(a ...*AnswerLangs) *AnswerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddLangIDs(ids...)
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (au *AnswerUpdate) AddResponseIDs(ids ...int) *AnswerUpdate {
	au.mutation.AddResponseIDs(ids...)
	return au
}

// AddResponses adds the "responses" edges to the Response entity.
func (au *AnswerUpdate) AddResponses(r ...*Response) *AnswerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.AddResponseIDs(ids...)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (au *AnswerUpdate) SetQuestionID(id int) *AnswerUpdate {
	au.mutation.SetQuestionID(id)
	return au
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (au *AnswerUpdate) SetNillableQuestionID(id *int) *AnswerUpdate {
	if id != nil {
		au = au.SetQuestionID(*id)
	}
	return au
}

// SetQuestion sets the "question" edge to the Question entity.
func (au *AnswerUpdate) SetQuestion(q *Question) *AnswerUpdate {
	return au.SetQuestionID(q.ID)
}

// Mutation returns the AnswerMutation object of the builder.
func (au *AnswerUpdate) Mutation() *AnswerMutation {
	return au.mutation
}

// ClearLangs clears all "langs" edges to the AnswerLangs entity.
func (au *AnswerUpdate) ClearLangs() *AnswerUpdate {
	au.mutation.ClearLangs()
	return au
}

// RemoveLangIDs removes the "langs" edge to AnswerLangs entities by IDs.
func (au *AnswerUpdate) RemoveLangIDs(ids ...int) *AnswerUpdate {
	au.mutation.RemoveLangIDs(ids...)
	return au
}

// RemoveLangs removes "langs" edges to AnswerLangs entities.
func (au *AnswerUpdate) RemoveLangs(a ...*AnswerLangs) *AnswerUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveLangIDs(ids...)
}

// ClearResponses clears all "responses" edges to the Response entity.
func (au *AnswerUpdate) ClearResponses() *AnswerUpdate {
	au.mutation.ClearResponses()
	return au
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (au *AnswerUpdate) RemoveResponseIDs(ids ...int) *AnswerUpdate {
	au.mutation.RemoveResponseIDs(ids...)
	return au
}

// RemoveResponses removes "responses" edges to Response entities.
func (au *AnswerUpdate) RemoveResponses(r ...*Response) *AnswerUpdate {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return au.RemoveResponseIDs(ids...)
}

// ClearQuestion clears the "question" edge to the Question entity.
func (au *AnswerUpdate) ClearQuestion() *AnswerUpdate {
	au.mutation.ClearQuestion()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AnswerUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(au.hooks) == 0 {
		affected, err = au.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			au.mutation = mutation
			affected, err = au.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(au.hooks) - 1; i >= 0; i-- {
			mut = au.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, au.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (au *AnswerUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AnswerUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AnswerUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

func (au *AnswerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answer.Table,
			Columns: answer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answer.FieldID,
			},
		},
	}
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if au.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLangsIDs(); len(nodes) > 0 && !au.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !au.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// AnswerUpdateOne is the builder for updating a single Answer entity.
type AnswerUpdateOne struct {
	config
	hooks    []Hook
	mutation *AnswerMutation
}

// AddLangIDs adds the "langs" edge to the AnswerLangs entity by IDs.
func (auo *AnswerUpdateOne) AddLangIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.AddLangIDs(ids...)
	return auo
}

// AddLangs adds the "langs" edges to the AnswerLangs entity.
func (auo *AnswerUpdateOne) AddLangs(a ...*AnswerLangs) *AnswerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddLangIDs(ids...)
}

// AddResponseIDs adds the "responses" edge to the Response entity by IDs.
func (auo *AnswerUpdateOne) AddResponseIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.AddResponseIDs(ids...)
	return auo
}

// AddResponses adds the "responses" edges to the Response entity.
func (auo *AnswerUpdateOne) AddResponses(r ...*Response) *AnswerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.AddResponseIDs(ids...)
}

// SetQuestionID sets the "question" edge to the Question entity by ID.
func (auo *AnswerUpdateOne) SetQuestionID(id int) *AnswerUpdateOne {
	auo.mutation.SetQuestionID(id)
	return auo
}

// SetNillableQuestionID sets the "question" edge to the Question entity by ID if the given value is not nil.
func (auo *AnswerUpdateOne) SetNillableQuestionID(id *int) *AnswerUpdateOne {
	if id != nil {
		auo = auo.SetQuestionID(*id)
	}
	return auo
}

// SetQuestion sets the "question" edge to the Question entity.
func (auo *AnswerUpdateOne) SetQuestion(q *Question) *AnswerUpdateOne {
	return auo.SetQuestionID(q.ID)
}

// Mutation returns the AnswerMutation object of the builder.
func (auo *AnswerUpdateOne) Mutation() *AnswerMutation {
	return auo.mutation
}

// ClearLangs clears all "langs" edges to the AnswerLangs entity.
func (auo *AnswerUpdateOne) ClearLangs() *AnswerUpdateOne {
	auo.mutation.ClearLangs()
	return auo
}

// RemoveLangIDs removes the "langs" edge to AnswerLangs entities by IDs.
func (auo *AnswerUpdateOne) RemoveLangIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.RemoveLangIDs(ids...)
	return auo
}

// RemoveLangs removes "langs" edges to AnswerLangs entities.
func (auo *AnswerUpdateOne) RemoveLangs(a ...*AnswerLangs) *AnswerUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveLangIDs(ids...)
}

// ClearResponses clears all "responses" edges to the Response entity.
func (auo *AnswerUpdateOne) ClearResponses() *AnswerUpdateOne {
	auo.mutation.ClearResponses()
	return auo
}

// RemoveResponseIDs removes the "responses" edge to Response entities by IDs.
func (auo *AnswerUpdateOne) RemoveResponseIDs(ids ...int) *AnswerUpdateOne {
	auo.mutation.RemoveResponseIDs(ids...)
	return auo
}

// RemoveResponses removes "responses" edges to Response entities.
func (auo *AnswerUpdateOne) RemoveResponses(r ...*Response) *AnswerUpdateOne {
	ids := make([]int, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return auo.RemoveResponseIDs(ids...)
}

// ClearQuestion clears the "question" edge to the Question entity.
func (auo *AnswerUpdateOne) ClearQuestion() *AnswerUpdateOne {
	auo.mutation.ClearQuestion()
	return auo
}

// Save executes the query and returns the updated Answer entity.
func (auo *AnswerUpdateOne) Save(ctx context.Context) (*Answer, error) {
	var (
		err  error
		node *Answer
	)
	if len(auo.hooks) == 0 {
		node, err = auo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AnswerMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			auo.mutation = mutation
			node, err = auo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(auo.hooks) - 1; i >= 0; i-- {
			mut = auo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, auo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AnswerUpdateOne) SaveX(ctx context.Context) *Answer {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AnswerUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AnswerUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (auo *AnswerUpdateOne) sqlSave(ctx context.Context) (_node *Answer, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   answer.Table,
			Columns: answer.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: answer.FieldID,
			},
		},
	}
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Answer.ID for update")}
	}
	_spec.Node.ID.Value = id
	if auo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLangsIDs(); len(nodes) > 0 && !auo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.LangsTable,
			Columns: []string{answer.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedResponsesIDs(); len(nodes) > 0 && !auo.mutation.ResponsesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ResponsesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   answer.ResponsesTable,
			Columns: []string{answer.ResponsesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: response.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.QuestionCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.QuestionIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   answer.QuestionTable,
			Columns: []string{answer.QuestionColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Answer{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{answer.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
