// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/answer"
	"github.com/vmkevv/duiztapi/ent/predicate"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/questionlangs"
	"github.com/vmkevv/duiztapi/ent/quiz"
)

// QuestionUpdate is the builder for updating Question entities.
type QuestionUpdate struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// Where adds a new predicate for the QuestionUpdate builder.
func (qu *QuestionUpdate) Where(ps ...predicate.Question) *QuestionUpdate {
	qu.mutation.predicates = append(qu.mutation.predicates, ps...)
	return qu
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (qu *QuestionUpdate) AddAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddAnswerIDs(ids...)
	return qu
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (qu *QuestionUpdate) AddAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.AddAnswerIDs(ids...)
}

// AddLangIDs adds the "langs" edge to the QuestionLangs entity by IDs.
func (qu *QuestionUpdate) AddLangIDs(ids ...int) *QuestionUpdate {
	qu.mutation.AddLangIDs(ids...)
	return qu
}

// AddLangs adds the "langs" edges to the QuestionLangs entity.
func (qu *QuestionUpdate) AddLangs(q ...*QuestionLangs) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddLangIDs(ids...)
}

// SetQuizID sets the "quiz" edge to the Quiz entity by ID.
func (qu *QuestionUpdate) SetQuizID(id int) *QuestionUpdate {
	qu.mutation.SetQuizID(id)
	return qu
}

// SetNillableQuizID sets the "quiz" edge to the Quiz entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableQuizID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetQuizID(*id)
	}
	return qu
}

// SetQuiz sets the "quiz" edge to the Quiz entity.
func (qu *QuestionUpdate) SetQuiz(q *Quiz) *QuestionUpdate {
	return qu.SetQuizID(q.ID)
}

// SetCorrectAnswerID sets the "correct_answer" edge to the Answer entity by ID.
func (qu *QuestionUpdate) SetCorrectAnswerID(id int) *QuestionUpdate {
	qu.mutation.SetCorrectAnswerID(id)
	return qu
}

// SetNillableCorrectAnswerID sets the "correct_answer" edge to the Answer entity by ID if the given value is not nil.
func (qu *QuestionUpdate) SetNillableCorrectAnswerID(id *int) *QuestionUpdate {
	if id != nil {
		qu = qu.SetCorrectAnswerID(*id)
	}
	return qu
}

// SetCorrectAnswer sets the "correct_answer" edge to the Answer entity.
func (qu *QuestionUpdate) SetCorrectAnswer(a *Answer) *QuestionUpdate {
	return qu.SetCorrectAnswerID(a.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (qu *QuestionUpdate) Mutation() *QuestionMutation {
	return qu.mutation
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (qu *QuestionUpdate) ClearAnswers() *QuestionUpdate {
	qu.mutation.ClearAnswers()
	return qu
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (qu *QuestionUpdate) RemoveAnswerIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveAnswerIDs(ids...)
	return qu
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (qu *QuestionUpdate) RemoveAnswers(a ...*Answer) *QuestionUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return qu.RemoveAnswerIDs(ids...)
}

// ClearLangs clears all "langs" edges to the QuestionLangs entity.
func (qu *QuestionUpdate) ClearLangs() *QuestionUpdate {
	qu.mutation.ClearLangs()
	return qu
}

// RemoveLangIDs removes the "langs" edge to QuestionLangs entities by IDs.
func (qu *QuestionUpdate) RemoveLangIDs(ids ...int) *QuestionUpdate {
	qu.mutation.RemoveLangIDs(ids...)
	return qu
}

// RemoveLangs removes "langs" edges to QuestionLangs entities.
func (qu *QuestionUpdate) RemoveLangs(q ...*QuestionLangs) *QuestionUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveLangIDs(ids...)
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (qu *QuestionUpdate) ClearQuiz() *QuestionUpdate {
	qu.mutation.ClearQuiz()
	return qu
}

// ClearCorrectAnswer clears the "correct_answer" edge to the Answer entity.
func (qu *QuestionUpdate) ClearCorrectAnswer() *QuestionUpdate {
	qu.mutation.ClearCorrectAnswer()
	return qu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuestionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuestionUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuestionUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuestionUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuestionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   question.Table,
			Columns: question.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: question.FieldID,
			},
		},
	}
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !qu.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedLangsIDs(); len(nodes) > 0 && !qu.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.QuizCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.QuizTable,
			Columns: []string{question.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quiz.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuizIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.QuizTable,
			Columns: []string{question.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quiz.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.CorrectAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.CorrectAnswerTable,
			Columns: []string{question.CorrectAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.CorrectAnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.CorrectAnswerTable,
			Columns: []string{question.CorrectAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QuestionUpdateOne is the builder for updating a single Question entity.
type QuestionUpdateOne struct {
	config
	hooks    []Hook
	mutation *QuestionMutation
}

// AddAnswerIDs adds the "answers" edge to the Answer entity by IDs.
func (quo *QuestionUpdateOne) AddAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddAnswerIDs(ids...)
	return quo
}

// AddAnswers adds the "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) AddAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.AddAnswerIDs(ids...)
}

// AddLangIDs adds the "langs" edge to the QuestionLangs entity by IDs.
func (quo *QuestionUpdateOne) AddLangIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.AddLangIDs(ids...)
	return quo
}

// AddLangs adds the "langs" edges to the QuestionLangs entity.
func (quo *QuestionUpdateOne) AddLangs(q ...*QuestionLangs) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddLangIDs(ids...)
}

// SetQuizID sets the "quiz" edge to the Quiz entity by ID.
func (quo *QuestionUpdateOne) SetQuizID(id int) *QuestionUpdateOne {
	quo.mutation.SetQuizID(id)
	return quo
}

// SetNillableQuizID sets the "quiz" edge to the Quiz entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableQuizID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetQuizID(*id)
	}
	return quo
}

// SetQuiz sets the "quiz" edge to the Quiz entity.
func (quo *QuestionUpdateOne) SetQuiz(q *Quiz) *QuestionUpdateOne {
	return quo.SetQuizID(q.ID)
}

// SetCorrectAnswerID sets the "correct_answer" edge to the Answer entity by ID.
func (quo *QuestionUpdateOne) SetCorrectAnswerID(id int) *QuestionUpdateOne {
	quo.mutation.SetCorrectAnswerID(id)
	return quo
}

// SetNillableCorrectAnswerID sets the "correct_answer" edge to the Answer entity by ID if the given value is not nil.
func (quo *QuestionUpdateOne) SetNillableCorrectAnswerID(id *int) *QuestionUpdateOne {
	if id != nil {
		quo = quo.SetCorrectAnswerID(*id)
	}
	return quo
}

// SetCorrectAnswer sets the "correct_answer" edge to the Answer entity.
func (quo *QuestionUpdateOne) SetCorrectAnswer(a *Answer) *QuestionUpdateOne {
	return quo.SetCorrectAnswerID(a.ID)
}

// Mutation returns the QuestionMutation object of the builder.
func (quo *QuestionUpdateOne) Mutation() *QuestionMutation {
	return quo.mutation
}

// ClearAnswers clears all "answers" edges to the Answer entity.
func (quo *QuestionUpdateOne) ClearAnswers() *QuestionUpdateOne {
	quo.mutation.ClearAnswers()
	return quo
}

// RemoveAnswerIDs removes the "answers" edge to Answer entities by IDs.
func (quo *QuestionUpdateOne) RemoveAnswerIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveAnswerIDs(ids...)
	return quo
}

// RemoveAnswers removes "answers" edges to Answer entities.
func (quo *QuestionUpdateOne) RemoveAnswers(a ...*Answer) *QuestionUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return quo.RemoveAnswerIDs(ids...)
}

// ClearLangs clears all "langs" edges to the QuestionLangs entity.
func (quo *QuestionUpdateOne) ClearLangs() *QuestionUpdateOne {
	quo.mutation.ClearLangs()
	return quo
}

// RemoveLangIDs removes the "langs" edge to QuestionLangs entities by IDs.
func (quo *QuestionUpdateOne) RemoveLangIDs(ids ...int) *QuestionUpdateOne {
	quo.mutation.RemoveLangIDs(ids...)
	return quo
}

// RemoveLangs removes "langs" edges to QuestionLangs entities.
func (quo *QuestionUpdateOne) RemoveLangs(q ...*QuestionLangs) *QuestionUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveLangIDs(ids...)
}

// ClearQuiz clears the "quiz" edge to the Quiz entity.
func (quo *QuestionUpdateOne) ClearQuiz() *QuestionUpdateOne {
	quo.mutation.ClearQuiz()
	return quo
}

// ClearCorrectAnswer clears the "correct_answer" edge to the Answer entity.
func (quo *QuestionUpdateOne) ClearCorrectAnswer() *QuestionUpdateOne {
	quo.mutation.ClearCorrectAnswer()
	return quo
}

// Save executes the query and returns the updated Question entity.
func (quo *QuestionUpdateOne) Save(ctx context.Context) (*Question, error) {
	var (
		err  error
		node *Question
	)
	if len(quo.hooks) == 0 {
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuestionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuestionUpdateOne) SaveX(ctx context.Context) *Question {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuestionUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuestionUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuestionUpdateOne) sqlSave(ctx context.Context) (_node *Question, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   question.Table,
			Columns: question.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: question.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Question.ID for update")}
	}
	_spec.Node.ID.Value = id
	if quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedAnswersIDs(); len(nodes) > 0 && !quo.mutation.AnswersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.AnswersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.AnswersTable,
			Columns: []string{question.AnswersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedLangsIDs(); len(nodes) > 0 && !quo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   question.LangsTable,
			Columns: []string{question.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.QuizCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.QuizTable,
			Columns: []string{question.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quiz.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuizIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   question.QuizTable,
			Columns: []string{question.QuizColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quiz.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.CorrectAnswerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.CorrectAnswerTable,
			Columns: []string{question.CorrectAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.CorrectAnswerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   question.CorrectAnswerTable,
			Columns: []string{question.CorrectAnswerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answer.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Question{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{question.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
