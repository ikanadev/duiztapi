// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/predicate"
	"github.com/vmkevv/duiztapi/ent/question"
	"github.com/vmkevv/duiztapi/ent/quiz"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
	"github.com/vmkevv/duiztapi/ent/user"
)

// QuizUpdate is the builder for updating Quiz entities.
type QuizUpdate struct {
	config
	hooks    []Hook
	mutation *QuizMutation
}

// Where adds a new predicate for the QuizUpdate builder.
func (qu *QuizUpdate) Where(ps ...predicate.Quiz) *QuizUpdate {
	qu.mutation.predicates = append(qu.mutation.predicates, ps...)
	return qu
}

// SetURLImg sets the "url_img" field.
func (qu *QuizUpdate) SetURLImg(s string) *QuizUpdate {
	qu.mutation.SetURLImg(s)
	return qu
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (qu *QuizUpdate) AddQuestionIDs(ids ...int) *QuizUpdate {
	qu.mutation.AddQuestionIDs(ids...)
	return qu
}

// AddQuestions adds the "questions" edges to the Question entity.
func (qu *QuizUpdate) AddQuestions(q ...*Question) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddQuestionIDs(ids...)
}

// AddLangIDs adds the "langs" edge to the QuizLangs entity by IDs.
func (qu *QuizUpdate) AddLangIDs(ids ...int) *QuizUpdate {
	qu.mutation.AddLangIDs(ids...)
	return qu
}

// AddLangs adds the "langs" edges to the QuizLangs entity.
func (qu *QuizUpdate) AddLangs(q ...*QuizLangs) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.AddLangIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (qu *QuizUpdate) AddUserIDs(ids ...int) *QuizUpdate {
	qu.mutation.AddUserIDs(ids...)
	return qu
}

// AddUsers adds the "users" edges to the User entity.
func (qu *QuizUpdate) AddUsers(u ...*User) *QuizUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return qu.AddUserIDs(ids...)
}

// Mutation returns the QuizMutation object of the builder.
func (qu *QuizUpdate) Mutation() *QuizMutation {
	return qu.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (qu *QuizUpdate) ClearQuestions() *QuizUpdate {
	qu.mutation.ClearQuestions()
	return qu
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (qu *QuizUpdate) RemoveQuestionIDs(ids ...int) *QuizUpdate {
	qu.mutation.RemoveQuestionIDs(ids...)
	return qu
}

// RemoveQuestions removes "questions" edges to Question entities.
func (qu *QuizUpdate) RemoveQuestions(q ...*Question) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveQuestionIDs(ids...)
}

// ClearLangs clears all "langs" edges to the QuizLangs entity.
func (qu *QuizUpdate) ClearLangs() *QuizUpdate {
	qu.mutation.ClearLangs()
	return qu
}

// RemoveLangIDs removes the "langs" edge to QuizLangs entities by IDs.
func (qu *QuizUpdate) RemoveLangIDs(ids ...int) *QuizUpdate {
	qu.mutation.RemoveLangIDs(ids...)
	return qu
}

// RemoveLangs removes "langs" edges to QuizLangs entities.
func (qu *QuizUpdate) RemoveLangs(q ...*QuizLangs) *QuizUpdate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return qu.RemoveLangIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (qu *QuizUpdate) ClearUsers() *QuizUpdate {
	qu.mutation.ClearUsers()
	return qu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (qu *QuizUpdate) RemoveUserIDs(ids ...int) *QuizUpdate {
	qu.mutation.RemoveUserIDs(ids...)
	return qu
}

// RemoveUsers removes "users" edges to User entities.
func (qu *QuizUpdate) RemoveUsers(u ...*User) *QuizUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return qu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (qu *QuizUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(qu.hooks) == 0 {
		affected, err = qu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuizMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			qu.mutation = mutation
			affected, err = qu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(qu.hooks) - 1; i >= 0; i-- {
			mut = qu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, qu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (qu *QuizUpdate) SaveX(ctx context.Context) int {
	affected, err := qu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (qu *QuizUpdate) Exec(ctx context.Context) error {
	_, err := qu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (qu *QuizUpdate) ExecX(ctx context.Context) {
	if err := qu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (qu *QuizUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quiz.Table,
			Columns: quiz.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quiz.FieldID,
			},
		},
	}
	if ps := qu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := qu.mutation.URLImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quiz.FieldURLImg,
		})
	}
	if qu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !qu.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedLangsIDs(); len(nodes) > 0 && !qu.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if qu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !qu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := qu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, qu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// QuizUpdateOne is the builder for updating a single Quiz entity.
type QuizUpdateOne struct {
	config
	hooks    []Hook
	mutation *QuizMutation
}

// SetURLImg sets the "url_img" field.
func (quo *QuizUpdateOne) SetURLImg(s string) *QuizUpdateOne {
	quo.mutation.SetURLImg(s)
	return quo
}

// AddQuestionIDs adds the "questions" edge to the Question entity by IDs.
func (quo *QuizUpdateOne) AddQuestionIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.AddQuestionIDs(ids...)
	return quo
}

// AddQuestions adds the "questions" edges to the Question entity.
func (quo *QuizUpdateOne) AddQuestions(q ...*Question) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddQuestionIDs(ids...)
}

// AddLangIDs adds the "langs" edge to the QuizLangs entity by IDs.
func (quo *QuizUpdateOne) AddLangIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.AddLangIDs(ids...)
	return quo
}

// AddLangs adds the "langs" edges to the QuizLangs entity.
func (quo *QuizUpdateOne) AddLangs(q ...*QuizLangs) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.AddLangIDs(ids...)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (quo *QuizUpdateOne) AddUserIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.AddUserIDs(ids...)
	return quo
}

// AddUsers adds the "users" edges to the User entity.
func (quo *QuizUpdateOne) AddUsers(u ...*User) *QuizUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return quo.AddUserIDs(ids...)
}

// Mutation returns the QuizMutation object of the builder.
func (quo *QuizUpdateOne) Mutation() *QuizMutation {
	return quo.mutation
}

// ClearQuestions clears all "questions" edges to the Question entity.
func (quo *QuizUpdateOne) ClearQuestions() *QuizUpdateOne {
	quo.mutation.ClearQuestions()
	return quo
}

// RemoveQuestionIDs removes the "questions" edge to Question entities by IDs.
func (quo *QuizUpdateOne) RemoveQuestionIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.RemoveQuestionIDs(ids...)
	return quo
}

// RemoveQuestions removes "questions" edges to Question entities.
func (quo *QuizUpdateOne) RemoveQuestions(q ...*Question) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveQuestionIDs(ids...)
}

// ClearLangs clears all "langs" edges to the QuizLangs entity.
func (quo *QuizUpdateOne) ClearLangs() *QuizUpdateOne {
	quo.mutation.ClearLangs()
	return quo
}

// RemoveLangIDs removes the "langs" edge to QuizLangs entities by IDs.
func (quo *QuizUpdateOne) RemoveLangIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.RemoveLangIDs(ids...)
	return quo
}

// RemoveLangs removes "langs" edges to QuizLangs entities.
func (quo *QuizUpdateOne) RemoveLangs(q ...*QuizLangs) *QuizUpdateOne {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return quo.RemoveLangIDs(ids...)
}

// ClearUsers clears all "users" edges to the User entity.
func (quo *QuizUpdateOne) ClearUsers() *QuizUpdateOne {
	quo.mutation.ClearUsers()
	return quo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (quo *QuizUpdateOne) RemoveUserIDs(ids ...int) *QuizUpdateOne {
	quo.mutation.RemoveUserIDs(ids...)
	return quo
}

// RemoveUsers removes "users" edges to User entities.
func (quo *QuizUpdateOne) RemoveUsers(u ...*User) *QuizUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return quo.RemoveUserIDs(ids...)
}

// Save executes the query and returns the updated Quiz entity.
func (quo *QuizUpdateOne) Save(ctx context.Context) (*Quiz, error) {
	var (
		err  error
		node *Quiz
	)
	if len(quo.hooks) == 0 {
		node, err = quo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*QuizMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			quo.mutation = mutation
			node, err = quo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(quo.hooks) - 1; i >= 0; i-- {
			mut = quo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, quo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (quo *QuizUpdateOne) SaveX(ctx context.Context) *Quiz {
	node, err := quo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (quo *QuizUpdateOne) Exec(ctx context.Context) error {
	_, err := quo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (quo *QuizUpdateOne) ExecX(ctx context.Context) {
	if err := quo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (quo *QuizUpdateOne) sqlSave(ctx context.Context) (_node *Quiz, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   quiz.Table,
			Columns: quiz.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: quiz.FieldID,
			},
		},
	}
	id, ok := quo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Quiz.ID for update")}
	}
	_spec.Node.ID.Value = id
	if value, ok := quo.mutation.URLImg(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: quiz.FieldURLImg,
		})
	}
	if quo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedQuestionsIDs(); len(nodes) > 0 && !quo.mutation.QuestionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.QuestionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.QuestionsTable,
			Columns: []string{quiz.QuestionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: question.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedLangsIDs(); len(nodes) > 0 && !quo.mutation.LangsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.LangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   quiz.LangsTable,
			Columns: []string{quiz.LangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if quo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !quo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := quo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   quiz.UsersTable,
			Columns: quiz.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Quiz{config: quo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, quo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{quiz.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
