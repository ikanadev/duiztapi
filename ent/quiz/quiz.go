// Code generated by entc, DO NOT EDIT.

package quiz

const (
	// Label holds the string label denoting the quiz type in the database.
	Label = "quiz"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURLImg holds the string denoting the url_img field in the database.
	FieldURLImg = "url_img"

	// EdgeQuestions holds the string denoting the questions edge name in mutations.
	EdgeQuestions = "questions"
	// EdgeLangs holds the string denoting the langs edge name in mutations.
	EdgeLangs = "langs"
	// EdgeUsers holds the string denoting the users edge name in mutations.
	EdgeUsers = "users"

	// Table holds the table name of the quiz in the database.
	Table = "quizs"
	// QuestionsTable is the table the holds the questions relation/edge.
	QuestionsTable = "questions"
	// QuestionsInverseTable is the table name for the Question entity.
	// It exists in this package in order to avoid circular dependency with the "question" package.
	QuestionsInverseTable = "questions"
	// QuestionsColumn is the table column denoting the questions relation/edge.
	QuestionsColumn = "quiz_questions"
	// LangsTable is the table the holds the langs relation/edge.
	LangsTable = "quiz_langs"
	// LangsInverseTable is the table name for the QuizLangs entity.
	// It exists in this package in order to avoid circular dependency with the "quizlangs" package.
	LangsInverseTable = "quiz_langs"
	// LangsColumn is the table column denoting the langs relation/edge.
	LangsColumn = "quiz_langs"
	// UsersTable is the table the holds the users relation/edge. The primary key declared below.
	UsersTable = "user_quizes"
	// UsersInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UsersInverseTable = "users"
)

// Columns holds all SQL columns for quiz fields.
var Columns = []string{
	FieldID,
	FieldURLImg,
}

var (
	// UsersPrimaryKey and UsersColumn2 are the table columns denoting the
	// primary key for the users relation (M2M).
	UsersPrimaryKey = []string{"user_id", "quiz_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
