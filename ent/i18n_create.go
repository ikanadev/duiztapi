// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/facebook/ent/schema/field"
	"github.com/vmkevv/duiztapi/ent/answerlangs"
	"github.com/vmkevv/duiztapi/ent/i18n"
	"github.com/vmkevv/duiztapi/ent/questionlangs"
	"github.com/vmkevv/duiztapi/ent/quizlangs"
)

// I18nCreate is the builder for creating a I18n entity.
type I18nCreate struct {
	config
	mutation *I18nMutation
	hooks    []Hook
}

// SetCode sets the "code" field.
func (ic *I18nCreate) SetCode(s string) *I18nCreate {
	ic.mutation.SetCode(s)
	return ic
}

// SetLanguage sets the "language" field.
func (ic *I18nCreate) SetLanguage(s string) *I18nCreate {
	ic.mutation.SetLanguage(s)
	return ic
}

// AddAnswerLangIDs adds the "answer_langs" edge to the AnswerLangs entity by IDs.
func (ic *I18nCreate) AddAnswerLangIDs(ids ...int) *I18nCreate {
	ic.mutation.AddAnswerLangIDs(ids...)
	return ic
}

// AddAnswerLangs adds the "answer_langs" edges to the AnswerLangs entity.
func (ic *I18nCreate) AddAnswerLangs(a ...*AnswerLangs) *I18nCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return ic.AddAnswerLangIDs(ids...)
}

// AddQuestionLangIDs adds the "question_langs" edge to the QuestionLangs entity by IDs.
func (ic *I18nCreate) AddQuestionLangIDs(ids ...int) *I18nCreate {
	ic.mutation.AddQuestionLangIDs(ids...)
	return ic
}

// AddQuestionLangs adds the "question_langs" edges to the QuestionLangs entity.
func (ic *I18nCreate) AddQuestionLangs(q ...*QuestionLangs) *I18nCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ic.AddQuestionLangIDs(ids...)
}

// AddQuizLangIDs adds the "quiz_langs" edge to the QuizLangs entity by IDs.
func (ic *I18nCreate) AddQuizLangIDs(ids ...int) *I18nCreate {
	ic.mutation.AddQuizLangIDs(ids...)
	return ic
}

// AddQuizLangs adds the "quiz_langs" edges to the QuizLangs entity.
func (ic *I18nCreate) AddQuizLangs(q ...*QuizLangs) *I18nCreate {
	ids := make([]int, len(q))
	for i := range q {
		ids[i] = q[i].ID
	}
	return ic.AddQuizLangIDs(ids...)
}

// Mutation returns the I18nMutation object of the builder.
func (ic *I18nCreate) Mutation() *I18nMutation {
	return ic.mutation
}

// Save creates the I18n in the database.
func (ic *I18nCreate) Save(ctx context.Context) (*I18n, error) {
	var (
		err  error
		node *I18n
	)
	if len(ic.hooks) == 0 {
		if err = ic.check(); err != nil {
			return nil, err
		}
		node, err = ic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*I18nMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ic.check(); err != nil {
				return nil, err
			}
			ic.mutation = mutation
			node, err = ic.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ic.hooks) - 1; i >= 0; i-- {
			mut = ic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ic *I18nCreate) SaveX(ctx context.Context) *I18n {
	v, err := ic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// check runs all checks and user-defined validators on the builder.
func (ic *I18nCreate) check() error {
	if _, ok := ic.mutation.Code(); !ok {
		return &ValidationError{Name: "code", err: errors.New("ent: missing required field \"code\"")}
	}
	if _, ok := ic.mutation.Language(); !ok {
		return &ValidationError{Name: "language", err: errors.New("ent: missing required field \"language\"")}
	}
	return nil
}

func (ic *I18nCreate) sqlSave(ctx context.Context) (*I18n, error) {
	_node, _spec := ic.createSpec()
	if err := sqlgraph.CreateNode(ctx, ic.driver, _spec); err != nil {
		if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (ic *I18nCreate) createSpec() (*I18n, *sqlgraph.CreateSpec) {
	var (
		_node = &I18n{config: ic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: i18n.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: i18n.FieldID,
			},
		}
	)
	if value, ok := ic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: i18n.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := ic.mutation.Language(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: i18n.FieldLanguage,
		})
		_node.Language = value
	}
	if nodes := ic.mutation.AnswerLangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   i18n.AnswerLangsTable,
			Columns: []string{i18n.AnswerLangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: answerlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.QuestionLangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   i18n.QuestionLangsTable,
			Columns: []string{i18n.QuestionLangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: questionlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ic.mutation.QuizLangsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   i18n.QuizLangsTable,
			Columns: []string{i18n.QuizLangsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: quizlangs.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// I18nCreateBulk is the builder for creating many I18n entities in bulk.
type I18nCreateBulk struct {
	config
	builders []*I18nCreate
}

// Save creates the I18n entities in the database.
func (icb *I18nCreateBulk) Save(ctx context.Context) ([]*I18n, error) {
	specs := make([]*sqlgraph.CreateSpec, len(icb.builders))
	nodes := make([]*I18n, len(icb.builders))
	mutators := make([]Mutator, len(icb.builders))
	for i := range icb.builders {
		func(i int, root context.Context) {
			builder := icb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*I18nMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, icb.builders[i+1].mutation)
				} else {
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, icb.driver, &sqlgraph.BatchCreateSpec{Nodes: specs}); err != nil {
						if cerr, ok := isSQLConstraintError(err); ok {
							err = cerr
						}
					}
				}
				mutation.done = true
				if err != nil {
					return nil, err
				}
				id := specs[i].ID.Value.(int64)
				nodes[i].ID = int(id)
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, icb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (icb *I18nCreateBulk) SaveX(ctx context.Context) []*I18n {
	v, err := icb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}
